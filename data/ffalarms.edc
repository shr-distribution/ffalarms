/* ffalarms -- finger friendly alarms
 * Copyright (C) 2009 ≈Åukasz Pankowski <lukpank@o2.pl>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#define A 65
#define B 25
#define G 15
#define M 10
#define BOLD_FONT "DejaVu Sans:style=Bold"
#define FONT "DejaVu Sans"

#define SIN_33 0.54463903501502708
#define COS_33 0.83867056794542405

#define LED_COLOR 0 255 0 255

#define PUZZLE_TIMEOUT 5
#define PUZZLE_INTER_TIMEOUT 1
#define PUZZLE_TEXT_SIZE 72
#define PUZZLE_RESET_TEXT_SIZE 90


#define PROG(NAME, SIGNAL, SOURCE, REST)                                \
    program {                                                           \
        name: NAME;                                                     \
        signal: SIGNAL;                                                 \
        source: SOURCE;                                                 \
        REST;                                                           \
    }

#define COLOR_BACKGROUND(NAME, COLOR)                                   \
    part {                                                              \
        name: NAME;                                                     \
        type: RECT;                                                     \
        mouse_events: 1;                                                \
        repeat_events: 0;                                               \
                                                                        \
        description {                                                   \
            state: "default" 0.0;                                       \
            color: COLOR;                                               \
                                                                        \
            rel1 {                                                      \
                relative: 0.0 0.0;                                      \
                offset: 0 0;                                            \
            }                                                           \
            rel2 {                                                      \
                relative: 1.0 1.0;                                      \
                offset: 0 0;                                            \
            }                                                           \
        }                                                               \
    }

#define HOUR_BUTTON(NAME, REL, OF1_X, OF1_Y, OF2_X, OF2_Y)              \
    part {                                                              \
        name: NAME"-hour-button";                                       \
        type: RECT;                                                     \
        mouse_events: 1;                                                \
                                                                        \
        description {                                                   \
            state: "default" 0.0;                                       \
            color: 0 0 0 0;                                             \
            visible: 1;                                                 \
                                                                        \
            rel1 {                                                      \
                relative: REL;                                          \
                offset: OF1_X OF1_Y;                                    \
                to: "circle";                                           \
            }                                                           \
            rel2 {                                                      \
                relative: REL;                                          \
                offset: OF2_X OF2_Y;                                    \
                to: "circle";                                           \
            }                                                           \
        }                                                               \
    }                                                                   \
    part {                                                              \
        name: NAME;                                                     \
        type: TEXT;                                                     \
        mouse_events: 0;                                                \
        repeat_events: 1;                                               \
                                                                        \
        description {                                                   \
            state: "default" 0.0;                                       \
            color: 0 0 0 255;                                           \
                                                                        \
            rel1 {                                                      \
                relative: REL;                                          \
                offset: OF1_X OF1_Y;                                    \
                to: "circle";                                           \
            }                                                           \
            rel2 {                                                      \
                relative: REL;                                          \
                offset: OF2_X OF2_Y;                                    \
                to: "circle";                                           \
            }                                                           \
            text {                                                      \
                text: NAME;                                             \
                font: BOLD_FONT;                                        \
                size: 36;                                               \
                align: 0.5 0.5;                                         \
            }                                                           \
        }                                                               \
        description {                                                   \
            state: "clicked" 0.0;                                       \
            inherit: "default" 0.0;                                     \
            rel1.offset: (OF1_X-40) (OF1_Y-40);                         \
            rel2.offset: (OF2_X+40) (OF2_Y+40);                         \
            text.size: 96;                                              \
        }                                                               \
        description {                                                   \
            state: "disabled" 0.0;                                      \
            inherit: "default" 0.0;                                     \
            color: 128 128 128 255;                                     \
        }                                                               \
    }

#define BUTTON(NAME, TXT, POS, TO, OF1, OF2)                            \
    BUTTON_EXT(NAME, TXT, POS, OF1, TO, POS, OF2, TO, color: 0 0 0 255)

#define BUTTON_COLOR(NAME, TXT, POS, TO, OF1, OF2, TXT_COLOR)           \
    BUTTON_EXT(NAME, TXT, POS, OF1, TO, POS, OF2, TO, color_class: TXT_COLOR)

#define BUTTON_EXT(NAME, TXT, POS1, OF1, TO1, POS2, OF2, TO2, TXT_COLOR) \
    part {                                                              \
        name: NAME"-button";                                            \
        type: RECT;                                                     \
        mouse_events: 1;                                                \
                                                                        \
        description {                                                   \
            state: "default" 0.0;                                       \
            align: 0.5 0.5;                                             \
            color: 0 0 0 30;                                            \
                                                                        \
            rel1 {                                                      \
                relative: POS1;                                         \
                offset: OF1;                                            \
                to: TO1;                                                \
            }                                                           \
            rel2 {                                                      \
                relative: POS2;                                         \
                offset: OF2;                                            \
                to: TO2;                                                \
            }                                                           \
        }                                                               \
        description {                                                   \
            state: "selected" 0.0;                                      \
            inherit: "default" 0.0;                                     \
            color: 0 0 0 80;                                            \
        }                                                               \
    }                                                                   \
    part {                                                              \
        name: NAME;                                                     \
        type: TEXT;                                                     \
        mouse_events: 0;                                                \
        repeat_events: 1;                                               \
                                                                        \
        description {                                                   \
            state: "default" 0.0;                                       \
            align: 0.5 0.5;                                             \
            TXT_COLOR;                                                  \
                                                                        \
            rel1 {                                                      \
                relative: 0 0;                                          \
                offset: 0 0;                                            \
                to: NAME"-button";                                      \
            }                                                           \
            rel2 {                                                      \
                relative: 1 1;                                          \
                offset: 0 0;                                            \
                to: NAME"-button";                                      \
            }                                                           \
            text {                                                      \
                text: TXT;                                              \
                font: BOLD_FONT;                                        \
                size: 30;                                               \
                align: 0.5 0.5;                                         \
            }                                                           \
        }                                                               \
    }

#define SQR_BUTTON_EXT(NAME, TXT, ALIGN, POS1, OF1, POS2, OF2)          \
    part {                                                              \
        name: NAME"-button";                                            \
        type: SWALLOW;                                                  \
        mouse_events: 1;                                                \
                                                                        \
        description {                                                   \
            state: "default" 0.0;                                       \
            align: ALIGN;                                               \
            aspect: 1 1;                                                \
            aspect_preference: BOTH;                                    \
            min: 60 60;                                                 \
                                                                        \
            rel1 {                                                      \
                relative: POS1;                                         \
                offset: OF1;                                            \
            }                                                           \
            rel2 {                                                      \
                relative: POS2;                                         \
                offset: OF2;                                            \
            }                                                           \
        }                                                               \
    }                                                                   \
    part {                                                              \
        name: NAME;                                                     \
        type: TEXT;                                                     \
        effect: SOFT_OUTLINE;                                           \
        mouse_events: 0;                                                \
        repeat_events: 1;                                               \
                                                                        \
        description {                                                   \
            state: "default" 0.0;                                       \
            align: 0.5 0.5;                                             \
            color: 255 255 255 255;                                     \
            color2: 0 0 0 255;                                          \
                                                                        \
            rel1.to: NAME"-button";                                     \
            rel2.to: NAME"-button";                                     \
            text {                                                      \
                text: TXT;                                              \
                font: BOLD_FONT;                                        \
                size: PUZZLE_TEXT_SIZE;                                 \
                align: 0.5 0.5;                                         \
            }                                                           \
        }                                                               \
        description {                                                   \
            state: "selected" 0.0;                                      \
            inherit: "default" 0.0;                                     \
            color: 0 0 0 255;                                           \
            color2: 255 255 255 255;                                    \
        }                                                               \
        description {                                                   \
            state: "restart" 0.0;                                       \
            inherit: "default" 0.0;                                     \
            color: 255 0 0 255;                                         \
            text.size: PUZZLE_RESET_TEXT_SIZE;                          \
        }                                                               \
    }

#define SEGMENT(NAME, SEG_NAME, REL1, REL2)                             \
    part {                                                              \
        name: NAME"-"SEG_NAME;                                          \
        type: RECT;                                                     \
                                                                        \
        description {                                                   \
            color_class: "led-color";                                   \
            rel1 { relative, REL1; to, NAME; }                          \
            rel2 { relative, REL2; to, NAME; }                          \
        }                                                               \
        description {                                                   \
            state: "hidden" 0.0;                                        \
            inherit: "default" 0.0;                                     \
            visible: 0;                                                 \
        }                                                               \
    }

#define DIGIT_SEGMENTS(NAME)                                            \
    { PART:NAME"-0", PART:NAME"-1", PART:NAME"-2", PART:NAME"-3",       \
      PART:NAME"-4", PART:NAME"-5", PART:NAME"-6" }

/*  000  */
/* 5   1 */
/*  666  */
/* 4   2 */
/*  333  */

#define DIGIT(NAME, REL1Y, REL2Y, TO)                                   \
    part {                                                              \
        name: NAME;                                                     \
        type: RECT;                                                     \
                                                                        \
        description {                                                   \
            visible: 0;                                                 \
            rel1 { relative: 0.0 REL1Y; to: TO; }                       \
            rel2 { relative: 1.0 REL2Y; to: TO; }                       \
        }                                                               \
    }                                                                   \
    SEGMENT(NAME, "0", 0.9 0, 1 1);                                     \
    SEGMENT(NAME, "6", 0.45 0.19, 0.55 0.81);                           \
    SEGMENT(NAME, "3", 0 0, 0.1 1);                                     \
    SEGMENT(NAME, "1", 0.45 0.8, 1 1);                                  \
    SEGMENT(NAME, "2", 0 0.8, 0.55 1);                                  \
    SEGMENT(NAME, "4", 0 0, 0.55 0.2);                                  \
    SEGMENT(NAME, "5", 0.45 0, 1 0.2);


color_classes {
    color_class {
        name: "led-color";
        color: LED_COLOR;
    }
}


images {
    image: "images/circle.png" COMP;
}


collections {
    group {
        name: "clock-group";

        parts {
            part {
                name: "circle";
                type: IMAGE;
                mouse_events: 0;

                description {
                    state: "default" 0.0;
                    max: 480 480;
                    align: 0.5 0.5;
                    rel1.relative: 0.0 0.0;
                    rel2.relative: 1.0 1.0;
                    image.normal: "images/circle.png";
                }
            }

            BUTTON("am-pm", "AM", 0.5 0.5, "circle",
                   (-3/2*A-G) -A/2, (-1/2*A-G) A/2);
            BUTTON("hour", "HH", 1.0 0.0, "am-pm", G 0, (A+G) A);
            BUTTON("minute", "00", 1.0 0.0, "hour", G 0, (A+G) A);

            HOUR_BUTTON("1", 0.5+0.5*SIN_33 0.5-0.5*COS_33, -A, 0, 0, A);
            HOUR_BUTTON("2", 0.5+0.5*COS_33 0.5-0.5*SIN_33, -A, 0, 0, A);

            HOUR_BUTTON("4", 0.5+0.5*COS_33 0.5+0.5*SIN_33, -A, -A, 0, 0);
            HOUR_BUTTON("5", 0.5+0.5*SIN_33 0.5+0.5*COS_33, -A, -A, 0, 0);

            HOUR_BUTTON("7", 0.5-0.5*SIN_33 0.5+0.5*COS_33, 0, -A, A, 0);
            HOUR_BUTTON("8", 0.5-0.5*COS_33 0.5+0.5*SIN_33, 0, -A, A, 0);

            HOUR_BUTTON("10", 0.5-0.5*COS_33 0.5-0.5*SIN_33, 0, 0, A, A);
            HOUR_BUTTON("11", 0.5-0.5*SIN_33 0.5-0.5*COS_33, 0, 0, A, A);

            HOUR_BUTTON("3", 1.0 0.5, (-A-B), -A/2, -G, A/2);
            HOUR_BUTTON("9", 0.0 0.5, M, -A/2, (A+B), A/2);
            HOUR_BUTTON("6", 0.5 1.0, -A/2, (-A-M), A/2, -M);
            HOUR_BUTTON("0", 0.5 0, -A/2, M, A/2, (A+M));
        }

        programs {
            PROG("load", "load", "", script { start(); });
            PROG("digit-down", "mouse,down,1", "*-hour-button",
                 script { digit_down(src); });
            PROG("digit-up", "mouse,up,1", "*-hour-button",
                 script { digit_up(); }
                in: 0.2 0.0; );
            PROG("hour-click", "mouse,clicked,1", "hour-button",
                 script { update(0); });
            PROG("minute-click", "mouse,clicked,1", "minute-button",
                 script { update(1); });
            PROG("am-pm-click", "mouse,clicked,1", "am-pm-button",
                 script {
                     set_int(am_pm, 1 - get_int(am_pm));
                     set_text(PART:"am-pm", get_int(am_pm) ? "PM" : "AM");
                     update(get_int(selected));
                     update_hour();
                 });
            PROG("set-hour", "*", "set-hour",
                 script { set_hour(atoi(sig)); });
            PROG("set-minute", "*", "set-minute",
                 script { set_minute(atoi(sig)); });
        }

        script {
            public selected, am_pm, digit, hour, minute;

            new const txt[] = {
                PART:"0", PART:"1", PART:"2", PART:"3", PART:"4", PART:"5",
                PART:"6", PART:"7", PART:"8", PART:"9", PART:"10", PART:"11"
            }

            public start () {
                set_int(selected, 0);
                set_int(am_pm, 0);
                set_int(digit, -1);
                set_int(hour, -1);
                set_int(minute, -1);
                set_state(PART:"hour-button", "selected", 0.0);
            }

            public digit_down(src[]) {
                new num = atoi(src), sel = get_int(selected);
                if (sel < 2 && get_int(digit) != num) {
                    stop_program(PROGRAM:"digit-up");
                    set_state(txt[num], "clicked", 0.0);
                    set_int(digit, num);
                    if (sel == 0) {
                        set_int(hour, num);
                        update_hour();
                    } else {
                        new s[10];
                        set_int(minute, 5 * num);
                        snprintf(s, 10, "%d%d", (5 * num) / 10, (5 * num) % 10);
                        set_text(PART:"minute", s);
                        snprintf(s, 10, "minute-%d", 5 * num);
                        emit("clicked", s);
                    }
                    update(sel + 1);
                }
            }

            public digit_up() {
                new d = get_int(digit), sel = get_int(selected), s[5];
                if (d >= 0) {
                    set_state(txt[d], (sel < 2) ? "default" : "disabled", 0.0);
                    if (sel == 1)
                        snprintf(s, 10, "%d%d", (5 * d) / 10, (5 * d) % 10);
                    else
                        snprintf(s, 5, "%d", (get_int(am_pm)) ? 12 + d : d);
                    set_text(txt[d], s);
                    set_int(digit, -1);
                }
            }

            public update_hour()
            {
                new h = get_int(hour), s[10];
                if (h >= 0) {
                    if (get_int(am_pm))
                        h += 12;
                    snprintf(s, 10, "%d", h);
                    set_text(PART:"hour", s);
                    snprintf(s, 10, "hour-%d", h);
                    emit("clicked", s);
                }
            }

            public update(sel) {
                new s[5], d=get_int(digit), pm=get_int(am_pm);
                set_int(selected, sel);
                for (new i = 0; i < 12; i++) {
                    if (i == d)
                        continue;
                    if (sel == 1)
                        snprintf(s, 10, "%d%d", (5 * i) / 10, (5 * i) % 10);
                    else
                        snprintf(s, 5, "%d", (pm) ? 12 + i : i);
                    set_text(txt[i], s);
                    set_state(txt[i], (sel < 2) ? "default" : "disabled", 0.0);
                }
                set_state(PART:"hour-button",
                          (sel == 0) ? "selected" : "default", 0.0);
                set_state(PART:"minute-button",
                          (sel == 1) ? "selected" : "default", 0.0);
            }

            public set_hour(h) {
                new s[5];
                set_int(am_pm, h >= 12);
                set_text(PART:"am-pm", get_int(am_pm) ? "PM" : "AM");
                set_int(hour, h % 12);
                snprintf(s, 5, "%d", h);
                set_text(PART:"hour", s);
            }

            public set_minute(m) {
                new s[5];
                set_int(minute, m);
                snprintf(s, 5, "%d%d", m / 10, m % 10);
                set_text(PART:"minute", s);
            }
        }
    }

    group {
        name: "puzzle-group";

        parts {
            part {
                name: "frame";
                type: SWALLOW;

                description {
                    rel1 {
                        relative: 0 0.14;
                        to_x: "0-button";
                    }
                    rel2 {
                        relative: 1 0.16;
                        to_x: "1-button";
                    }
                }
            }
            SQR_BUTTON_EXT("0", "1", 1.0 1.0,
                           0.1 0.3, 0 0,
                           0.5 0.6, -M -M);
            SQR_BUTTON_EXT("1", "2", 0.0 1.0,
                           0.5 0.3, M 0,
                           0.9 0.6, 0 -M);
            SQR_BUTTON_EXT("2", "3", 1.0 0.0,
                           0.1 0.6, 0 M,
                           0.5 0.9, -M 0);
            SQR_BUTTON_EXT("3", "4", 0.0 0.0,
                           0.5 0.6, M M,
                           0.9 0.9, 0.0 0.0);
        }

        programs {
            program {
                name: "start";
                signal: "start";
                source: "";
                script { start(1); }
            }
            program {
                name: "clicked";
                signal: "mouse,clicked,1";
                source: "?-button";
                script {
                    new s[2];
                    getsarg(1, s, 2);
                    clicked(atoi(s));
                }
            }
        }

        script {
            const btn_cnt = 4;

            new const btns_txt[] = { PART:"0", PART:"1", PART:"2", PART:"3" }

            public puzzle, cur_num;

            public set_perm(var) {
                while (count(var) > 0)
                    remove(var, 0);
                new a[btn_cnt] = { 0, 1, ... };
                for (new i = 0; i < btn_cnt; i++) {
                    new idx = rand() % (btn_cnt - i);
                    append_int(var, a[idx]);
                    a[idx] = a[btn_cnt - i - 1];
                }
            }

            public restart(val) {
                if (get_int(cur_num) == -1)
                    return;
                set_int(cur_num, -2);
                for (new i = 0; i < btn_cnt; i++) {
                    set_text(btns_txt[i], "?");
                    set_state(btns_txt[i], "restart", 0.0);
                }
                timer(PUZZLE_INTER_TIMEOUT, "start", 0);
            }

            public start(val) {
                if (!val && get_int(cur_num) == -1)
                    return;
                set_perm(puzzle);
                new s[10];
                for (new i = 0; i < btn_cnt; i++) {
                    set_state(btns_txt[i], "default", 0.0);
                    snprintf(s, 10, "%d", fetch_int(puzzle, i) + 1);
                    set_text(btns_txt[i], s);
                }
                set_int(cur_num, 0);
                timer(PUZZLE_TIMEOUT, "restart", 0);
            }

            public clicked(num) {
                if (count(puzzle) == 0)
                    return;
                new cur = get_int(cur_num);
                if (fetch_int(puzzle, num) == cur) {
                    set_int(cur_num, cur + 1);
                    set_state(btns_txt[num], "selected", 0.0);
                } else if (cur >= 0) {
                    set_int(cur_num, 0);
                    for (new i = 0; i < btn_cnt; i++)
                        set_state(btns_txt[i], "default", 0.0);
                }
                if (get_int(cur_num) == btn_cnt) {
                    set_int(cur_num, -1);
                    timer(0.01, "solved", 0);
                }
            }

            public solved(dummy) {
                emit("solved", "");
            }
        }
    }

    #define DIGIT_W 0.19
    group {
        name: "landscape-clock-group";
        parts{
            COLOR_BACKGROUND("background", 0 0 0 255);

            part {
                name: "display";
                type: RECT;
                description {
                    visible: 0;
                    rel1.relative: (0.5 - 0.9 * 1.33 * DIGIT_W) 0.05;
                    rel2.relative: (0.5 + 0.9 * 1.33 * DIGIT_W) 0.95;
                }
                description {
                    state: "12h" 0.0;
                    visible: 0;
                    rel1.relative: (0.5 - 1.06 * 1.33 * DIGIT_W) -0.11;
                    rel2.relative: (0.5 + 1.06 * 1.33 * DIGIT_W) 0.95;
                }
            }
            DIGIT("h10", 0.0, DIGIT_W, "display");
            DIGIT("h1", 0.25, 0.25+DIGIT_W, "display");
            DIGIT("m10", 0.75-DIGIT_W, 0.75, "display");
            DIGIT("m1", 1.0-DIGIT_W, 1.0, "display");

            part {
                name: "dot-1";
                type: RECT;
                description {
                    color_class: "led-color";
                    rel1 { relative: 0.6 (0.5-DIGIT_W/10); to: "display"; }
                    rel2 { relative: 0.7 (0.5+DIGIT_W/10); to: "display"; }
                }
            }
            part {
                name: "dot-2";
                type: RECT;
                description {
                    color_class: "led-color";
                    rel1 { relative: 0.3 (0.5-DIGIT_W/10); to: "display"; }
                    rel2 { relative: 0.4 (0.5+DIGIT_W/10); to: "display"; }
                }
            }

            BUTTON_COLOR("cancel", "X", 0.0 1.0, "background",
                         M (-A-M), (A+M) -M, "led-color");

            script {
                new const parts[4][] = {
                    DIGIT_SEGMENTS("h10"),
                    DIGIT_SEGMENTS("h1"),
                    DIGIT_SEGMENTS("m10"),
                    DIGIT_SEGMENTS("m1")
                }

                new const digits[11][] = {
                    {1, 1, 1, 1, 1, 1, 0},
                    {0, 1, 1, 0, 0, 0, 0},
                    {1, 1, 0, 1, 1, 0, 1},
                    {1, 1, 1, 1, 0, 0, 1},
                    {0, 1, 1, 0, 0, 1, 1},
                    {1, 0, 1, 1, 0, 1, 1},
                    {1, 0, 1, 1, 1, 1, 1},
                    {1, 1, 1, 0, 0, 0, 0},
                    {1, 1, 1, 1, 1, 1, 1},
                    {1, 1, 1, 1, 0, 1, 1},
                    {0, 0, 0, 0, 0, 0, 0},
                }

                public set_digit(num, digit) {
                    for (new i = 0; i < 7; i++)
                        set_state(parts[num][i], (digits[digit][i]) ?
                                  "default" : "hidden", 0.0);
                }

                public prev_hour, running, h24;

                public clock_cb(val) {
                    new year, month, day, yearday, weekday, hour, minute;
                    new Float:second;
                    date(year, month, day, yearday, weekday,
                         hour, minute, second);
                    if (val && get_int(running))
                        timer(60.0 - second, "clock_cb", 1);
                    if (! get_int(h24))
                        hour = (hour == 0 || hour == 12) ? 12 : (hour % 12);
                    if (hour != get_int(prev_hour)) {
                        set_digit(0, (hour < 10) ? 10 : (hour / 10));
                        set_digit(1, hour % 10);
                        set_state(PART:"display",
                                  (hour < 20) ? "12h" : "default", 0.0);
                        set_int(prev_hour, hour);
                    }
                    set_digit(2, minute / 10);
                    set_digit(3, minute % 10);
                }

                public start() {
                    set_int(prev_hour, 88);
                    set_int(running, 1);
                    clock_cb(1);
                }

                public stop() {
                    set_int(running, 0);
                }

                public set_h24(v) {
                    set_int(h24, v);
                    if (get_int(running))
                        clock_cb(0);
                }
            }

            programs {
                program {
                    name: "load";
                    signal: "load";
                    source: "";
                    script { set_int(h24, 1); }
                }
                program {
                    name: "start";
                    signal: "start";
                    source: "";
                    script { start(); }
                }
                program {
                    name: "stop";
                    signal: "stop";
                    source: "";
                    script { stop(); }
                }
                program {
                    name: "24h";
                    signal: "24hr-format";
                    source: "";
                    script { set_h24(1); }
                }
                program {
                    name: "12h";
                    signal: "12hr-format";
                    source: "";
                    script { set_h24(0); }
                }
            }
        }
    }
}
