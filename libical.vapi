/* libical.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "ICal", lower_case_cprefix = "ical")]
namespace ICal {
	[Compact]
	[CCode (cheader_filename = "libical/ical.h", cname="icalarray")]
	public class Array {
		public void* data;
		public uint element_size;
		public uint increment_size;
		public uint num_elements;
		public uint space_allocated;
		[CCode (type = "icalarray*", has_construct_function = false)]
		public Array (int element_size, int increment_size);
		public void append (void* element);
		public void* element_at (int position);
		public void remove_element_at (int position);
		public void sort (GLib.Callback compare);
	}
	[Compact]
	[CCode (ref_function = "icalattach_ref", ref_function_void = true, unref_function = "icalattach_unref", cheader_filename = "libical/ical.h", cname="icalattach")]
	public class Attach {
		[CCode (type = "icalattach*", has_construct_function = false)]
		public Attach.from_data (uint data, ICal.icalattach_free_fn_t free_fn, void* free_fn_data);
		[CCode (type = "icalattach*", has_construct_function = false)]
		public Attach.from_url (string url);
		public uint get_data ();
		public bool get_is_url ();
		public unowned string get_url ();
	}
	[Compact]
	[CCode (cheader_filename = "libical/ical.h", cname="icalcomponent")]
	public class Component {
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component (ICal.ComponentKind kind);
		public void add_component (owned ICal.Component child);
		public void add_property (owned ICal.Property property);
		public unowned string as_ical_string ();
		public string as_ical_string_r ();
		[SimpleType]
		[CCode (cname="icalcompiter")]
		public struct _CompIter {}
		[CCode (cname="icalcomponent_begin_component")]
		public _CompIter _begin_component (ICal.ComponentKind kind);
		[CCode (cname="icalcomponent_begin_component_wrapper")]
		public ICal.CompIter begin_component (ICal.ComponentKind kind=ComponentKind.ANY) {
			return (ICal.CompIter) _begin_component(kind);
		}
		public int check_restrictions ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.clone (ICal.Component self);
		public void convert_errors ();
		public int count_components (ICal.ComponentKind kind);
		public int count_errors ();
		public int count_properties (ICal.PropertyKind kind);
		public ICal.CompIter end_component (ICal.ComponentKind kind);
		public void foreach_recurrence (ICal.Time start, ICal.Time end, GLib.Callback callback, void* callback_data);
		public void foreach_tzid (GLib.Callback callback, void* callback_data);
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.from_string (string str);
		public unowned string get_comment ();
		public unowned ICal.Component get_current_component ();
		public unowned ICal.Property get_current_property ();
		public unowned string get_description ();
		public ICal.Time get_dtend ();
		public ICal.Time get_dtstamp ();
		public ICal.Time get_dtstart ();
		public ICal.Time get_due ();
		public void* get_duration ();
		public unowned ICal.Component get_first_component (ICal.ComponentKind kind);
		public unowned ICal.Property get_first_property (ICal.PropertyKind kind);
		public unowned ICal.Component get_first_real_component ();
		public unowned ICal.Component get_inner ();
		public unowned string get_location ();
		public ICal.PropertyMethod get_method ();
		public unowned ICal.Component get_next_component (ICal.ComponentKind kind);
		public unowned ICal.Property get_next_property (ICal.PropertyKind kind);
		public unowned ICal.Component get_parent ();
		public ICal.Time get_recurrenceid ();
		public unowned string get_relcalid ();
		public int get_sequence ();
		public void* get_span ();
		public ICal.PropertyStatus get_status ();
		public unowned string get_summary ();
		public unowned ICal.TimeZone get_timezone (string tzid);
		public unowned string get_uid ();
		public bool is_valid ();
		public ICal.ComponentKind isa ();
		public static int isa_component (void* component);
		public static bool kind_is_valid (ICal.ComponentKind kind);
		public static unowned string kind_to_string (ICal.ComponentKind kind);
		public void merge_component (ICal.Component comp_to_merge);
		public void remove_component (ICal.Component child);
		public void remove_property (ICal.Property property);
		public void set_comment (string v);
		public void set_description (string v);
		public void set_dtend (ICal.Time v);
		public void set_dtstamp (ICal.Time v);
		public void set_dtstart (ICal.Time v);
		public void set_due (ICal.Time v);
		public void set_duration (void* v);
		public void set_location (string v);
		public void set_method (ICal.PropertyMethod method);
		public void set_parent (ICal.Component parent);
		public void set_recurrenceid (ICal.Time v);
		public void set_relcalid (string v);
		public void set_sequence (int v);
		public void set_status (ICal.PropertyStatus v);
		public void set_summary (string v);
		public void set_uid (string v);
		public static ICal.ComponentKind string_to_kind (string str);
		public void strip_errors ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.vagenda ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.valarm ();
		public static unowned ICal.Component vanew (ICal.ComponentKind kind);
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.vcalendar ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.vevent ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.vfreebusy ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.vjournal ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.vquery ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.vtimezone ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.vtodo ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.x (string x_name);
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.xdaylight ();
		[CCode (type = "icalcomponent*", has_construct_function = false)]
		public Component.xstandard ();
	}
	[Compact]
	[CCode (cheader_filename = "libical/ical.h", cname="icalparameter")]
	public class Parameter {
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter (ICal.ParameterKind kind);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.actionparam (ICal.ParameterAction v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.altrep (string v);
		public unowned string as_ical_string ();
		public string as_ical_string_r ();
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.charset (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.clone (ICal.Parameter self);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.cn (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.cutype (ICal.ParameterCUType v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.delegatedfrom (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.delegatedto (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.dir (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.enable (ICal.ParameterEnable v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.encoding (ICal.ParameterEncoding v);
		public static unowned string enum_to_string (int e);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.fbtype (ICal.ParameterFbType v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.fmttype (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.from_string (string value);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.from_value_string (ICal.ParameterKind kind, string value);
		public ICal.ParameterAction get_actionparam ();
		public unowned string get_altrep ();
		public unowned string get_charset ();
		public unowned string get_cn ();
		public ICal.ParameterCUType get_cutype ();
		public unowned string get_delegatedfrom ();
		public unowned string get_delegatedto ();
		public unowned string get_dir ();
		public ICal.ParameterEnable get_enable ();
		public ICal.ParameterEncoding get_encoding ();
		public ICal.ParameterFbType get_fbtype ();
		public unowned string get_fmttype ();
		public unowned string get_id ();
		public unowned string get_language ();
		public unowned string get_latency ();
		public ICal.icalparameter_local get_local ();
		public unowned string get_localize ();
		public unowned string get_member ();
		public unowned string get_options ();
		public ICal.ParameterPartStat get_partstat ();
		public ICal.ParameterRange get_range ();
		public ICal.ParameterRelated get_related ();
		public ICal.ParameterRelType get_reltype ();
		public ICal.ParameterRole get_role ();
		public ICal.ParameterRSVP get_rsvp ();
		public unowned string get_sentby ();
		public unowned string get_tzid ();
		public ICal.ParameterValue get_value ();
		public unowned string get_x ();
		public ICal.icalparameter_xliccomparetype get_xliccomparetype ();
		public ICal.icalparameter_xlicerrortype get_xlicerrortype ();
		public unowned string get_xname ();
		public unowned string get_xvalue ();
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.id (string v);
		public bool is_valid ();
		public ICal.ParameterKind isa ();
		public static int isa_parameter (void* param);
		public static unowned string kind_to_string (ICal.ParameterKind kind);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.language (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.latency (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.local (ICal.icalparameter_local v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.localize (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.member (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.options (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.partstat (ICal.ParameterPartStat v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.range (ICal.ParameterRange v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.related (ICal.ParameterRelated v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.reltype (ICal.ParameterRelType v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.role (ICal.ParameterRole v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.rsvp (ICal.ParameterRSVP v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.sentby (string v);
		public void set_actionparam (ICal.ParameterAction v);
		public void set_altrep (string v);
		public void set_charset (string v);
		public void set_cn (string v);
		public void set_cutype (ICal.ParameterCUType v);
		public void set_delegatedfrom (string v);
		public void set_delegatedto (string v);
		public void set_dir (string v);
		public void set_enable (ICal.ParameterEnable v);
		public void set_encoding (ICal.ParameterEncoding v);
		public void set_fbtype (ICal.ParameterFbType v);
		public void set_fmttype (string v);
		public void set_id (string v);
		public void set_language (string v);
		public void set_latency (string v);
		public void set_local (ICal.icalparameter_local v);
		public void set_localize (string v);
		public void set_member (string v);
		public void set_options (string v);
		public void set_partstat (ICal.ParameterPartStat v);
		public void set_range (ICal.ParameterRange v);
		public void set_related (ICal.ParameterRelated v);
		public void set_reltype (ICal.ParameterRelType v);
		public void set_role (ICal.ParameterRole v);
		public void set_rsvp (ICal.ParameterRSVP v);
		public void set_sentby (string v);
		public void set_tzid (string v);
		public void set_value (ICal.ParameterValue v);
		public void set_x (string v);
		public void set_xliccomparetype (ICal.icalparameter_xliccomparetype v);
		public void set_xlicerrortype (ICal.icalparameter_xlicerrortype v);
		public void set_xname (string v);
		public void set_xvalue (string v);
		public static int string_to_enum (string str);
		public static ICal.ParameterKind string_to_kind (string str);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.tzid (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.value (ICal.ParameterValue v);
		public static ICal.ValueKind value_to_value_kind (ICal.ParameterValue value);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.x (string v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.xliccomparetype (ICal.icalparameter_xliccomparetype v);
		[CCode (type = "icalparameter*", has_construct_function = false)]
		public Parameter.xlicerrortype (ICal.icalparameter_xlicerrortype v);
	}
	[Compact]
	[CCode (cheader_filename = "libical/ical.h", cname="icalparser")]
	public class Parser {
		[CCode (type = "icalparser*", has_construct_function = false)]
		public Parser ();
		public ICal.Component add_line (string str);
		public unowned ICal.Component clean ();
		public unowned string get_line (ICal.LineGenFunc line_gen_func);
		public ICal.ParserState get_state ();
		public ICal.Component parse (ICal.LineGenFunc line_gen_func);
		public static ICal.Component parse_string (string str);
		public static ICal.Value parse_value (ICal.ValueKind kind, string str, out unowned ICal.Component errors);
		public void set_gen_data (void* data);
		public static unowned string string_line_generator (string @out, size_t buf_size, void* d);
	}
	[Compact]
	[CCode (cheader_filename = "libical/ical.h", cname="icalproperty")]
	public class Property {
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property (ICal.PropertyKind kind);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.action (ICal.PropertyAction v);
		public void add_parameter (ICal.Parameter parameter);
		public static void add_parameters (void* prop, void* args);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.allowconflict (string v);
		public unowned string as_ical_string ();
		public string as_ical_string_r ();
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.attach (ICal.Attach v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.attendee (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.calid (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.calmaster (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.calscale (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.capversion (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.carid (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.carlevel (ICal.icalproperty_carlevel v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.categories (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.@class (ICal.PropertyClass v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.clone (ICal.Property self);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.cmd (ICal.PropertyCmd v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.comment (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.completed (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.components (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.contact (string v);
		public int count_parameters ();
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.created (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.csid (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.datemax (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.datemin (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.decreed (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.defaultcharset (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.defaultlocale (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.defaulttzid (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.defaultvcars (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.deny (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.description (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.dtend (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.dtstamp (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.dtstart (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.due (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.duration (void* v);
		public static int enum_belongs_to_property (ICal.PropertyKind kind, int e);
		public static unowned string enum_to_string (int e);
		public static string enum_to_string_r (int e);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.exdate (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.expand (int v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.exrule (ICal.Recurrence v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.freebusy (void* v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.from_string (string str);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.geo (void* v);
		public ICal.PropertyAction get_action ();
		public unowned string get_allowconflict ();
		public unowned ICal.Attach get_attach ();
		public unowned string get_attendee ();
		public unowned string get_calid ();
		public unowned string get_calmaster ();
		public unowned string get_calscale ();
		public unowned string get_capversion ();
		public unowned string get_carid ();
		public ICal.icalproperty_carlevel get_carlevel ();
		public unowned string get_categories ();
		public ICal.PropertyClass get_class ();
		public ICal.PropertyCmd get_cmd ();
		public unowned string get_comment ();
		public ICal.Time get_completed ();
		public unowned string get_components ();
		public unowned string get_contact ();
		public ICal.Time get_created ();
		public unowned string get_csid ();
		public ICal.Time get_datemax ();
		public ICal.Time get_datemin ();
		public unowned string get_decreed ();
		public unowned string get_defaultcharset ();
		public unowned string get_defaultlocale ();
		public unowned string get_defaulttzid ();
		public unowned string get_defaultvcars ();
		public unowned string get_deny ();
		public unowned string get_description ();
		public ICal.Time get_dtend ();
		public ICal.Time get_dtstamp ();
		public ICal.Time get_dtstart ();
		public ICal.Time get_due ();
		public void* get_duration ();
		public ICal.Time get_exdate ();
		public int get_expand ();
		public ICal.Recurrence get_exrule ();
		public unowned ICal.Parameter get_first_parameter (ICal.ParameterKind kind);
		public void* get_freebusy ();
		public void* get_geo ();
		public unowned string get_grant ();
		public unowned string get_itipversion ();
		public ICal.Time get_lastmodified ();
		public unowned string get_location ();
		public int get_maxcomponentsize ();
		public ICal.Time get_maxdate ();
		public int get_maxresults ();
		public int get_maxresultssize ();
		public ICal.PropertyMethod get_method ();
		public ICal.Time get_mindate ();
		public unowned string get_multipart ();
		public unowned string get_name ();
		public unowned ICal.Parameter get_next_parameter (ICal.ParameterKind kind);
		public unowned string get_organizer ();
		public unowned string get_owner ();
		public unowned string get_parameter_as_string (string name);
		public string get_parameter_as_string_r (string name);
		public int get_percentcomplete ();
		public unowned string get_permission ();
		public int get_priority ();
		public unowned string get_prodid ();
		public unowned string get_property_name ();
		public string get_property_name_r ();
		public unowned string get_query ();
		public unowned string get_queryid ();
		public ICal.PropertyQueryLevel get_querylevel ();
		public unowned string get_queryname ();
		public void* get_rdate ();
		public unowned string get_recuraccepted ();
		public unowned string get_recurexpand ();
		public unowned string get_recurlimit ();
		public ICal.Time get_recurrenceid ();
		public unowned string get_relatedto ();
		public unowned string get_relcalid ();
		public int get_repeat ();
		public void* get_requeststatus ();
		public unowned string get_resources ();
		public unowned string get_restriction ();
		public ICal.Recurrence get_rrule ();
		public unowned string get_scope ();
		public int get_sequence ();
		public ICal.PropertyStatus get_status ();
		public unowned string get_storesexpanded ();
		public unowned string get_summary ();
		public unowned string get_target ();
		public ICal.PropertyTransp get_transp ();
		public void* get_trigger ();
		public unowned string get_tzid ();
		public unowned string get_tzname ();
		public int get_tzoffsetfrom ();
		public int get_tzoffsetto ();
		public unowned string get_tzurl ();
		public unowned string get_uid ();
		public unowned string get_url ();
		public unowned ICal.Value get_value ();
		public unowned string get_value_as_string ();
		public string get_value_as_string_r ();
		public unowned string get_version ();
		public unowned string get_x ();
		public unowned string get_x_name ();
		public ICal.PropertyXLICClass get_xlicclass ();
		public unowned string get_xlicclustercount ();
		public unowned string get_xlicerror ();
		public unowned string get_xlicmimecharset ();
		public unowned string get_xlicmimecid ();
		public unowned string get_xlicmimecontenttype ();
		public unowned string get_xlicmimeencoding ();
		public unowned string get_xlicmimefilename ();
		public unowned string get_xlicmimeoptinfo ();
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.grant (string v);
		public ICal.PropertyKind isa ();
		public static int isa_property (void* property);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.itipversion (string v);
		public static int kind_and_string_to_enum (int kind, string str);
		public static bool kind_is_valid (ICal.PropertyKind kind);
		public static unowned string kind_to_string (ICal.PropertyKind kind);
		public static ICal.ValueKind kind_to_value_kind (ICal.PropertyKind kind);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.lastmodified (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.location (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.maxcomponentsize (int v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.maxdate (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.maxresults (int v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.maxresultssize (int v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.method (ICal.PropertyMethod v);
		public static unowned string method_to_string (ICal.PropertyMethod method);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.mindate (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.multipart (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.name (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.organizer (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.owner (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.percentcomplete (int v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.permission (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.priority (int v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.prodid (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.query (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.queryid (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.querylevel (ICal.PropertyQueryLevel v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.queryname (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.rdate (void* v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.recuraccepted (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.recurexpand (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.recurlimit (string v);
		public bool recurrence_is_excluded (ICal.Time dtstart, ICal.Time recurtime);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.recurrenceid (ICal.Time v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.relatedto (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.relcalid (string v);
		public void remove_parameter (ICal.ParameterKind kind);
		public void remove_parameter_by_kind (ICal.ParameterKind kind);
		public void remove_parameter_by_name (string name);
		public void remove_parameter_by_ref (ICal.Parameter param);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.repeat (int v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.requeststatus (void* v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.resources (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.restriction (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.rrule (ICal.Recurrence v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.scope (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.sequence (int v);
		public void set_action (ICal.PropertyAction v);
		public void set_allowconflict (string v);
		public void set_attach (ICal.Attach v);
		public void set_attendee (string v);
		public void set_calid (string v);
		public void set_calmaster (string v);
		public void set_calscale (string v);
		public void set_capversion (string v);
		public void set_carid (string v);
		public void set_carlevel (ICal.icalproperty_carlevel v);
		public void set_categories (string v);
		public void set_class (ICal.PropertyClass v);
		public void set_cmd (ICal.PropertyCmd v);
		public void set_comment (string v);
		public void set_completed (ICal.Time v);
		public void set_components (string v);
		public void set_contact (string v);
		public void set_created (ICal.Time v);
		public void set_csid (string v);
		public void set_datemax (ICal.Time v);
		public void set_datemin (ICal.Time v);
		public void set_decreed (string v);
		public void set_defaultcharset (string v);
		public void set_defaultlocale (string v);
		public void set_defaulttzid (string v);
		public void set_defaultvcars (string v);
		public void set_deny (string v);
		public void set_description (string v);
		public void set_dtend (ICal.Time v);
		public void set_dtstamp (ICal.Time v);
		public void set_dtstart (ICal.Time v);
		public void set_due (ICal.Time v);
		public void set_duration (void* v);
		public void set_exdate (ICal.Time v);
		public void set_expand (int v);
		public void set_exrule (ICal.Recurrence v);
		public void set_freebusy (void* v);
		public void set_geo (void* v);
		public void set_grant (string v);
		public void set_itipversion (string v);
		public void set_lastmodified (ICal.Time v);
		public void set_location (string v);
		public void set_maxcomponentsize (int v);
		public void set_maxdate (ICal.Time v);
		public void set_maxresults (int v);
		public void set_maxresultssize (int v);
		public void set_method (ICal.PropertyMethod v);
		public void set_mindate (ICal.Time v);
		public void set_multipart (string v);
		public void set_name (string v);
		public void set_organizer (string v);
		public void set_owner (string v);
		public void set_parameter (ICal.Parameter parameter);
		public void set_parameter_from_string (string name, string value);
		public void set_percentcomplete (int v);
		public void set_permission (string v);
		public void set_priority (int v);
		public void set_prodid (string v);
		public void set_query (string v);
		public void set_queryid (string v);
		public void set_querylevel (ICal.PropertyQueryLevel v);
		public void set_queryname (string v);
		public void set_rdate (void* v);
		public void set_recuraccepted (string v);
		public void set_recurexpand (string v);
		public void set_recurlimit (string v);
		public void set_recurrenceid (ICal.Time v);
		public void set_relatedto (string v);
		public void set_relcalid (string v);
		public void set_repeat (int v);
		public void set_requeststatus (void* v);
		public void set_resources (string v);
		public void set_restriction (string v);
		public void set_rrule (ICal.Recurrence v);
		public void set_scope (string v);
		public void set_sequence (int v);
		public void set_status (ICal.PropertyStatus v);
		public void set_storesexpanded (string v);
		public void set_summary (string v);
		public void set_target (string v);
		public void set_transp (ICal.PropertyTransp v);
		public void set_trigger (void* v);
		public void set_tzid (string v);
		public void set_tzname (string v);
		public void set_tzoffsetfrom (int v);
		public void set_tzoffsetto (int v);
		public void set_tzurl (string v);
		public void set_uid (string v);
		public void set_url (string v);
		public void set_value (ICal.Value value);
		public void set_value_from_string (string value, string kind);
		public void set_version (string v);
		public void set_x (string v);
		public void set_x_name (string name);
		public void set_xlicclass (ICal.PropertyXLICClass v);
		public void set_xlicclustercount (string v);
		public void set_xlicerror (string v);
		public void set_xlicmimecharset (string v);
		public void set_xlicmimecid (string v);
		public void set_xlicmimecontenttype (string v);
		public void set_xlicmimeencoding (string v);
		public void set_xlicmimefilename (string v);
		public void set_xlicmimeoptinfo (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.status (ICal.PropertyStatus v);
		public static unowned string status_to_string (ICal.PropertyStatus p1);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.storesexpanded (string v);
		public static int string_to_enum (string str);
		public static ICal.PropertyKind string_to_kind (string str);
		public static ICal.PropertyMethod string_to_method (string str);
		public static ICal.PropertyStatus string_to_status (string str);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.summary (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.target (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.transp (ICal.PropertyTransp v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.trigger (void* v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.tzid (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.tzname (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.tzoffsetfrom (int v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.tzoffsetto (int v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.tzurl (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.uid (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.url (string v);
		public static ICal.PropertyKind value_kind_to_kind (ICal.ValueKind kind);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.version (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.x (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.xlicclass (ICal.PropertyXLICClass v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.xlicclustercount (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.xlicerror (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.xlicmimecharset (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.xlicmimecid (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.xlicmimecontenttype (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.xlicmimeencoding (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.xlicmimefilename (string v);
		[CCode (type = "icalproperty*", has_construct_function = false)]
		public Property.xlicmimeoptinfo (string v);
	}
	[Compact]
	[CCode (cheader_filename = "libical/ical.h")]
	public class PvlElem {
	}
	[Compact]
	[CCode (cheader_filename = "libical/ical.h", cname="icalrecur_iterator")]
	public class RecurIterator {
		[CCode (type = "icalrecur_iterator*", has_construct_function = false)]
		public RecurIterator (ICal.Recurrence rule, ICal.Time dtstart);
		public void decrement_count ();
		public ICal.Time next ();
	}
	[Compact]
	[CCode (copy_function = "icaltimezone_copy", free_function = "icaltimezone_free", cheader_filename = "libical/ical.h", cname="icaltimezone")]
	public class TimeZone {
		[CCode (cname = "icaltimezone_new", type = "icaltimezone*", has_construct_function = false)]
		public TimeZone ();
		[CCode (cname = "icaltimezone_array_append_from_vtimezone")]
		public static void array_append_from_vtimezone (ICal.Array timezones, ICal.Component child);
		[CCode (cname = "icaltimezone_array_free")]
		public static void array_free (ICal.Array timezones);
		[CCode (cname = "icaltimezone_array_new")]
		public static unowned ICal.Array array_new ();
		[CCode (cname = "icaltimezone_convert_time")]
		public static void convert_time (ref ICal.Time tt, ICal.TimeZone from_zone, ICal.TimeZone to_zone);
		[CCode (cname = "icaltimezone_copy")]
		public static unowned ICal.TimeZone copy (ICal.TimeZone originalzone);
		[CCode (cname = "icaltimezone_dump_changes")]
		public static int dump_changes (ICal.TimeZone zone, int max_year, GLib.FileStream fp);
		[CCode (cname = "icaltimezone_free_builtin_timezones")]
		public static void free_builtin_timezones ();
		[CCode (cname = "icaltimezone_get_builtin_timezone")]
		public static unowned ICal.TimeZone get_builtin_timezone (string location);
		[CCode (cname = "icaltimezone_get_builtin_timezone_from_offset")]
		public static unowned ICal.TimeZone get_builtin_timezone_from_offset (int offset, string tzname);
		[CCode (cname = "icaltimezone_get_builtin_timezone_from_tzid")]
		public static unowned ICal.TimeZone get_builtin_timezone_from_tzid (string tzid);
		[CCode (cname = "icaltimezone_get_builtin_timezones")]
		public static unowned ICal.Array get_builtin_timezones ();
		[CCode (cname = "icaltimezone_get_component")]
		public static unowned ICal.Component get_component (ICal.TimeZone zone);
		[CCode (cname = "icaltimezone_get_display_name")]
		public static unowned string get_display_name (ICal.TimeZone zone);
		[CCode (cname = "icaltimezone_get_latitude")]
		public static double get_latitude (ICal.TimeZone zone);
		[CCode (cname = "icaltimezone_get_location")]
		public static unowned string get_location (ICal.TimeZone zone);
		[CCode (cname = "icaltimezone_get_longitude")]
		public static double get_longitude (ICal.TimeZone zone);
		[CCode (cname = "icaltimezone_get_tzid")]
		public static unowned string get_tzid (ICal.TimeZone zone);
		[CCode (cname = "icaltimezone_get_tznames")]
		public static unowned string get_tznames (ICal.TimeZone zone);
		[CCode (cname = "icaltimezone_get_utc_offset")]
		public static int get_utc_offset (ICal.TimeZone zone, ICal.Time tt, bool is_daylight);
		[CCode (cname = "icaltimezone_get_utc_offset_of_utc_time")]
		public static int get_utc_offset_of_utc_time (ICal.TimeZone zone, ICal.Time tt, bool is_daylight);
		[CCode (cname = "icaltimezone_get_utc_timezone")]
		public static unowned ICal.TimeZone get_utc_timezone ();
		[CCode (cname = "icaltimezone_release_zone_tab")]
		public static void release_zone_tab ();
		[CCode (cname = "icaltimezone_set_component")]
		public static int set_component (ICal.TimeZone zone, ICal.Component comp);
		[CCode (cname = "icaltimezone_set_tzid_prefix")]
		public static void set_tzid_prefix (string new_prefix);
	}
	[Compact]
	[CCode (cheader_filename = "libical/ical.h", cname="icalvalue")]
	public class Value {
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value (ICal.ValueKind kind);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.action (ICal.PropertyAction v);
		public unowned global::string as_ical_string ();
		public global::string as_ical_string_r ();
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.attach (ICal.Attach attach);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.binary (global::string v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.boolean (bool v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.caladdress (global::string v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.carlevel (ICal.icalproperty_carlevel v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.@class (ICal.PropertyClass v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.clone (ICal.Value self);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.cmd (ICal.PropertyCmd v);
		public ICal.icalparameter_xliccomparetype compare (ICal.Value b);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.date (ICal.Time v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.datetime (ICal.Time v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.datetimeperiod (void* v);
		public static int decode_ical_string (global::string szText, global::string szDecText, int nMaxBufferLen);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.duration (void* v);
		public static int encode_ical_string (global::string szText, global::string szEncText, int MaxBufferLen);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.float (global::float v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.from_string (ICal.ValueKind kind, global::string str);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.geo (void* v);
		public ICal.PropertyAction get_action ();
		public unowned ICal.Attach get_attach ();
		public unowned global::string get_binary ();
		public bool get_boolean ();
		public unowned global::string get_caladdress ();
		public ICal.icalproperty_carlevel get_carlevel ();
		public ICal.PropertyClass get_class ();
		public ICal.PropertyCmd get_cmd ();
		public ICal.Time get_date ();
		public ICal.Time get_datetime ();
		public void* get_datetimeperiod ();
		public void* get_duration ();
		public global::float get_float ();
		public void* get_geo ();
		public int get_integer ();
		public ICal.PropertyMethod get_method ();
		public void* get_period ();
		public unowned global::string get_query ();
		public ICal.PropertyQueryLevel get_querylevel ();
		public ICal.Recurrence get_recur ();
		public void* get_requeststatus ();
		public ICal.PropertyStatus get_status ();
		public unowned global::string get_string ();
		public unowned global::string get_text ();
		public ICal.PropertyTransp get_transp ();
		public void* get_trigger ();
		public unowned global::string get_uri ();
		public int get_utcoffset ();
		public unowned global::string get_x ();
		public ICal.PropertyXLICClass get_xlicclass ();
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.integer (int v);
		public bool is_valid ();
		public ICal.ValueKind isa ();
		public static int isa_value (void* p1);
		public static bool kind_is_valid (ICal.ValueKind kind);
		public static unowned global::string kind_to_string (ICal.ValueKind kind);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.method (ICal.PropertyMethod v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.period (void* v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.query (global::string v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.querylevel (ICal.PropertyQueryLevel v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.recur (ICal.Recurrence v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.requeststatus (void* v);
		public void reset_kind ();
		public void set_action (ICal.PropertyAction v);
		public void set_attach (ICal.Attach attach);
		public void set_binary (global::string v);
		public void set_boolean (bool v);
		public void set_caladdress (global::string v);
		public void set_carlevel (ICal.icalproperty_carlevel v);
		public void set_class (ICal.PropertyClass v);
		public void set_cmd (ICal.PropertyCmd v);
		public void set_date (ICal.Time v);
		public void set_datetime (ICal.Time v);
		public void set_datetimeperiod (void* v);
		public void set_duration (void* v);
		public void set_float (global::float v);
		public void set_geo (void* v);
		public void set_integer (int v);
		public void set_method (ICal.PropertyMethod v);
		public void set_period (void* v);
		public void set_query (global::string v);
		public void set_querylevel (ICal.PropertyQueryLevel v);
		public void set_recur (ICal.Recurrence v);
		public void set_requeststatus (void* v);
		public void set_status (ICal.PropertyStatus v);
		public void set_string (global::string v);
		public void set_text (global::string v);
		public void set_transp (ICal.PropertyTransp v);
		public void set_trigger (void* v);
		public void set_uri (global::string v);
		public void set_utcoffset (int v);
		public void set_x (global::string v);
		public void set_xlicclass (ICal.PropertyXLICClass v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.status (ICal.PropertyStatus v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.string (global::string v);
		public static ICal.ValueKind string_to_kind (global::string str);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.text (global::string v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.transp (ICal.PropertyTransp v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.trigger (void* v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.uri (global::string v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.utcoffset (int v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.x (global::string v);
		[CCode (type = "icalvalue*", has_construct_function = false)]
		public Value.xlicclass (ICal.PropertyXLICClass v);
	}
	[Compact]
	[CCode (cheader_filename = "libical/ical.h")]
	public class icaltime_span {
		public ulong end;
		public bool is_busy;
		public ulong start;
	}
	[CCode (type_id = "ICALTYPE_COMP_ITER", cheader_filename = "libical/ical.h", cname="icalcompiter")]
	public struct CompIter {
		public bool next () {
		    return deref() != null;
		    unowned Component c = _next();
		    return c != null;
		}

		public unowned ICal.Component? get() {
		    unowned Component result = deref();
		    _next();
		    return result;
		}

		public CompIter iterator() {
		    return this;
		}
		public ICal.ComponentKind kind;
		public unowned ICal.PvlElem iter;
		[CCode (cname = "icalcompiter_deref")]
		public unowned ICal.Component deref ();
		[CCode (cname = "icalcompiter_next")]
		public unowned ICal.Component _next ();
		[CCode (cname = "icalcompiter_prior")]
		public unowned ICal.Component prior ();
	}
	[CCode (cheader_filename = "libical/ical.h", cname="struct icalrecurrencetype")]
	[SimpleType]
	public struct Recurrence {
		[CCode (cname="ICAL_RECURRENCE_ARRAY_MAX")]
		public const short ARRAY_MAX;
		[CCode (cname="ICAL_RECURRENCE_ARRAY_MAX_BYTE")]
		public const uchar ARRAY_MAX_BYTE;
		public ICal.RecurrenceFrequency freq;
		public ICal.Time until;
		public int count;
		public short interval;
		public ICal.RecurrenceWeekday week_start;
		[CCode (array_length = false)]
		public unowned short[] by_second;
		[CCode (array_length = false)]
		public unowned short[] by_minute;
		[CCode (array_length = false)]
		public unowned short[] by_hour;
		[CCode (array_length = false)]
		public unowned short[] by_day;
		[CCode (array_length = false)]
		public unowned short[] by_month_day;
		[CCode (array_length = false)]
		public unowned short[] by_year_day;
		[CCode (array_length = false)]
		public unowned short[] by_week_no;
		[CCode (array_length = false)]
		public unowned short[] by_month;
		[CCode (array_length = false)]
		public unowned short[] by_set_pos;
		[CCode (cname = "icalrecurrencetype_as_string")]
		public static unowned string as_string (ref ICal.Recurrence recur);
		[CCode (cname = "icalrecurrencetype_as_string_r")]
		public static string as_string_r (ref ICal.Recurrence recur);
		[CCode (cname = "icalrecurrencetype_clear")]
		public static void clear (ref ICal.Recurrence r);
		[CCode (cname = "icalrecurrencetype_day_day_of_week")]
		public static ICal.RecurrenceWeekday day_day_of_week (short day);
		[CCode (cname = "icalrecurrencetype_day_position")]
		public static int day_position (short day);
		[CCode (cname = "icalrecurrencetype_from_string")]
		public static ICal.Recurrence from_string (string str);
	}
	[CCode (cheader_filename = "libical/ical.h", cname="struct icaltimetype")]
	[SimpleType]
	public struct Time {
		public int year;
		public int month;
		public int day;
		public int hour;
		public int minute;
		public int second;
		public bool is_daylight;
		public unowned ICal.TimeZone zone;
		public ICal.Time add (void* d);
		public static void adjust (ICal.Time tt, int days, int hours, int minutes, int seconds);
		public unowned string as_ical_string ();
		public string as_ical_string_r ();
		public time_t as_timet ();
		public int compare (ICal.Time b);
		public int compare_date_only (ICal.Time b);
		public int compare_date_only_tz (ICal.Time b, ICal.TimeZone tz);
		public int compare_with_zone (ICal.Time b);
		public ICal.Time convert_to_zone (ICal.TimeZone? zone);
		public static ICal.Time current_time_with_zone (ICal.TimeZone zone);
		public int day_of_week ();
		public int day_of_year ();
		public static int days_in_month (int month, int year);
		public static int days_in_year (int year);
		public static ICal.Time from_day_of_year (int doy, int year);
		public static ICal.Time from_string (string str);
		public static ICal.Time from_string_with_zone (string str, ICal.TimeZone zone);
		public static ICal.Time from_timet_with_zone (ulong tm, bool is_date, ICal.TimeZone? zone);
		public static ICal.Time from_week_number (int week_number, int year);
		public unowned ICal.TimeZone get_timezone ();
		public unowned string get_tzid ();
		public bool is_date ();
		public bool is_floating ();
		public static bool is_leap_year (int year);
		public bool is_null_time ();
		public bool is_utc ();
		public bool is_valid_time ();
		public ICal.Time normalize ();
		public static ICal.Time null_date ();
		public static ICal.Time null_time ();
		public static ICal.Time set_timezone (ref ICal.Time t, ICal.TimeZone? zone);
		public static int span_contains (ICal.icaltime_span s, ICal.icaltime_span container);
		public void* span_new (ICal.Time dtend, bool is_busy);
		public static int span_overlaps (ICal.icaltime_span s1, ICal.icaltime_span s2);
		public int start_doy_of_week ();
		public int start_doy_week (int fdow);
		public void* subtract (ICal.Time t2);
		public static ICal.Time today ();
		public int week_number ();
	}
	[CCode (cprefix = "ICAL_", has_type_id = "0", cheader_filename = "libical/ical.h", cname="icalcomponent_kind")]
	public enum ComponentKind {
		[CCode (cname="ICAL_NO_COMPONENT")]
		NO,
		[CCode (cname="ICAL_ANY_COMPONENT")]
		ANY,
		[CCode (cname="ICAL_XROOT_COMPONENT")]
		XROOT,
		[CCode (cname="ICAL_XATTACH_COMPONENT")]
		XATTACH,
		[CCode (cname="ICAL_VEVENT_COMPONENT")]
		VEVENT,
		[CCode (cname="ICAL_VTODO_COMPONENT")]
		VTODO,
		[CCode (cname="ICAL_VJOURNAL_COMPONENT")]
		VJOURNAL,
		[CCode (cname="ICAL_VCALENDAR_COMPONENT")]
		VCALENDAR,
		[CCode (cname="ICAL_VAGENDA_COMPONENT")]
		VAGENDA,
		[CCode (cname="ICAL_VFREEBUSY_COMPONENT")]
		VFREEBUSY,
		[CCode (cname="ICAL_VALARM_COMPONENT")]
		VALARM,
		[CCode (cname="ICAL_XAUDIOALARM_COMPONENT")]
		XAUDIOALARM,
		[CCode (cname="ICAL_XDISPLAYALARM_COMPONENT")]
		XDISPLAYALARM,
		[CCode (cname="ICAL_XEMAILALARM_COMPONENT")]
		XEMAILALARM,
		[CCode (cname="ICAL_XPROCEDUREALARM_COMPONENT")]
		XPROCEDUREALARM,
		[CCode (cname="ICAL_VTIMEZONE_COMPONENT")]
		VTIMEZONE,
		[CCode (cname="ICAL_XSTANDARD_COMPONENT")]
		XSTANDARD,
		[CCode (cname="ICAL_XDAYLIGHT_COMPONENT")]
		XDAYLIGHT,
		[CCode (cname="ICAL_X_COMPONENT")]
		X,
		[CCode (cname="ICAL_VSCHEDULE_COMPONENT")]
		VSCHEDULE,
		[CCode (cname="ICAL_VQUERY_COMPONENT")]
		VQUERY,
		[CCode (cname="ICAL_VREPLY_COMPONENT")]
		VREPLY,
		[CCode (cname="ICAL_VCAR_COMPONENT")]
		VCAR,
		[CCode (cname="ICAL_VCOMMAND_COMPONENT")]
		VCOMMAND,
		[CCode (cname="ICAL_XLICINVALID_COMPONENT")]
		XLICINVALID,
		[CCode (cname="ICAL_XLICMIMEPART_COMPONENT")]
		XLICMIMEPART
	}
	[CCode (cprefix = "ICAL_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ErrorEnum {
		NO_ERROR,
		BADARG_ERROR,
		NEWFAILED_ERROR,
		ALLOCATION_ERROR,
		MALFORMEDDATA_ERROR,
		PARSE_ERROR,
		INTERNAL_ERROR,
		FILE_ERROR,
		USAGE_ERROR,
		UNIMPLEMENTED_ERROR,
		UNKNOWN_ERROR
	}
	[CCode (cprefix = "ICAL_ERROR_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ErrorState {
		FATAL,
		NONFATAL,
		DEFAULT,
		UNKNOWN
	}
	[CCode (cprefix = "ICAL_ACTIONPARAM_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterAction {
		X,
		ASK,
		ABORT,
		NONE
	}
	[CCode (cprefix = "ICAL_CUTYPE_", has_type_id = "0", cheader_filename = "libical/ical.h", cname="calparameter_cutype")]
	public enum ParameterCUType {
		X,
		INDIVIDUAL,
		GROUP,
		RESOURCE,
		ROOM,
		UNKNOWN,
		NONE
	}
	[CCode (cprefix = "ICAL_ENABLE_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterEnable {
		X,
		TRUE,
		FALSE,
		NONE
	}
	[CCode (cprefix = "ICAL_ENCODING_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterEncoding {
		X,
		@8BIT,
		BASE64,
		NONE
	}
	[CCode (cprefix = "ICAL_FBTYPE_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterFbType {
		X,
		FREE,
		BUSY,
		BUSYUNAVAILABLE,
		BUSYTENTATIVE,
		NONE
	}
	[CCode (cprefix = "ICAL_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterKind {
		[CCode (cname="ICAL_ANY_PARAMETER")]
		ANY,
		[CCode (cname="ICAL_ACTIONPARAM_PARAMETER")]
		ACTIONPARAM,
		[CCode (cname="ICAL_ALTREP_PARAMETER")]
		ALTREP,
		[CCode (cname="ICAL_CHARSET_PARAMETER")]
		CHARSET,
		[CCode (cname="ICAL_CN_PARAMETER")]
		CN,
		[CCode (cname="ICAL_CUTYPE_PARAMETER")]
		CUTYPE,
		[CCode (cname="ICAL_DELEGATEDFROM_PARAMETER")]
		DELEGATEDFROM,
		[CCode (cname="ICAL_DELEGATEDTO_PARAMETER")]
		DELEGATEDTO,
		[CCode (cname="ICAL_DIR_PARAMETER")]
		DIR,
		[CCode (cname="ICAL_ENABLE_PARAMETER")]
		ENABLE,
		[CCode (cname="ICAL_ENCODING_PARAMETER")]
		ENCODING,
		[CCode (cname="ICAL_FBTYPE_PARAMETER")]
		FBTYPE,
		[CCode (cname="ICAL_FMTTYPE_PARAMETER")]
		FMTTYPE,
		[CCode (cname="ICAL_ID_PARAMETER")]
		ID,
		[CCode (cname="ICAL_LANGUAGE_PARAMETER")]
		LANGUAGE,
		[CCode (cname="ICAL_LATENCY_PARAMETER")]
		LATENCY,
		[CCode (cname="ICAL_LOCAL_PARAMETER")]
		LOCAL,
		[CCode (cname="ICAL_LOCALIZE_PARAMETER")]
		LOCALIZE,
		[CCode (cname="ICAL_MEMBER_PARAMETER")]
		MEMBER,
		[CCode (cname="ICAL_OPTIONS_PARAMETER")]
		OPTIONS,
		[CCode (cname="ICAL_PARTSTAT_PARAMETER")]
		PARTSTAT,
		[CCode (cname="ICAL_RANGE_PARAMETER")]
		RANGE,
		[CCode (cname="ICAL_RELATED_PARAMETER")]
		RELATED,
		[CCode (cname="ICAL_RELTYPE_PARAMETER")]
		RELTYPE,
		[CCode (cname="ICAL_ROLE_PARAMETER")]
		ROLE,
		[CCode (cname="ICAL_RSVP_PARAMETER")]
		RSVP,
		[CCode (cname="ICAL_SENTBY_PARAMETER")]
		SENTBY,
		[CCode (cname="ICAL_TZID_PARAMETER")]
		TZID,
		[CCode (cname="ICAL_VALUE_PARAMETER")]
		VALUE,
		[CCode (cname="ICAL_X_PARAMETER")]
		X,
		[CCode (cname="ICAL_XLICCOMPARETYPE_PARAMETER")]
		XLICCOMPARETYPE,
		[CCode (cname="ICAL_XLICERRORTYPE_PARAMETER")]
		XLICERRORTYPE,
		[CCode (cname="ICAL_NO_PARAMETER")]
		NO
	}
	[CCode (cprefix = "ICAL_PARTSTAT_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterPartStat {
		X,
		NEEDSACTION,
		ACCEPTED,
		DECLINED,
		TENTATIVE,
		DELEGATED,
		COMPLETED,
		INPROCESS,
		NONE
	}
	[CCode (cprefix = "ICAL_RSVP_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterRSVP {
		X,
		TRUE,
		FALSE,
		NONE
	}
	[CCode (cprefix = "ICAL_RANGE_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterRange {
		X,
		THISANDPRIOR,
		THISANDFUTURE,
		NONE
	}
	[CCode (cprefix = "ICAL_RELTYPE_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterRelType {
		X,
		PARENT,
		CHILD,
		SIBLING,
		NONE
	}
	[CCode (cprefix = "ICAL_RELATED_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterRelated {
		X,
		START,
		END,
		NONE
	}
	[CCode (cprefix = "ICAL_ROLE_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterRole {
		X,
		CHAIR,
		REQPARTICIPANT,
		OPTPARTICIPANT,
		NONPARTICIPANT,
		NONE
	}
	[CCode (cprefix = "ICAL_VALUE_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParameterValue {
		X,
		BINARY,
		BOOLEAN,
		DATE,
		DURATION,
		FLOAT,
		INTEGER,
		PERIOD,
		RECUR,
		TEXT,
		URI,
		ERROR,
		DATETIME,
		UTCOFFSET,
		CALADDRESS,
		NONE
	}
	[CCode (cprefix = "ICALPARSER_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ParserState {
		ERROR,
		SUCCESS,
		BEGIN_COMP,
		END_COMP,
		IN_PROGRESS
	}
	[CCode (cprefix = "ICAL_ACTION_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum PropertyAction {
		X,
		AUDIO,
		DISPLAY,
		EMAIL,
		PROCEDURE,
		NONE
	}
	[CCode (cprefix = "ICAL_CLASS_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum PropertyClass {
		X,
		PUBLIC,
		PRIVATE,
		CONFIDENTIAL,
		NONE
	}
	[CCode (cprefix = "ICAL_CMD_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum PropertyCmd {
		X,
		ABORT,
		CONTINUE,
		CREATE,
		DELETE,
		GENERATEUID,
		GETCAPABILITY,
		IDENTIFY,
		MODIFY,
		MOVE,
		REPLY,
		SEARCH,
		SETLOCALE,
		NONE
	}
	[CCode (cprefix = "ICAL_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum PropertyKind {
		[CCode (cname="ICAL_ANY_PROPERTY")]
		ANY,
		[CCode (cname="ICAL_ACTION_PROPERTY")]
		ACTION,
		[CCode (cname="ICAL_ALLOWCONFLICT_PROPERTY")]
		ALLOWCONFLICT,
		[CCode (cname="ICAL_ATTACH_PROPERTY")]
		ATTACH,
		[CCode (cname="ICAL_ATTENDEE_PROPERTY")]
		ATTENDEE,
		[CCode (cname="ICAL_CALID_PROPERTY")]
		CALID,
		[CCode (cname="ICAL_CALMASTER_PROPERTY")]
		CALMASTER,
		[CCode (cname="ICAL_CALSCALE_PROPERTY")]
		CALSCALE,
		[CCode (cname="ICAL_CAPVERSION_PROPERTY")]
		CAPVERSION,
		[CCode (cname="ICAL_CARLEVEL_PROPERTY")]
		CARLEVEL,
		[CCode (cname="ICAL_CARID_PROPERTY")]
		CARID,
		[CCode (cname="ICAL_CATEGORIES_PROPERTY")]
		CATEGORIES,
		[CCode (cname="ICAL_CLASS_PROPERTY")]
		CLASS,
		[CCode (cname="ICAL_CMD_PROPERTY")]
		CMD,
		[CCode (cname="ICAL_COMMENT_PROPERTY")]
		COMMENT,
		[CCode (cname="ICAL_COMPLETED_PROPERTY")]
		COMPLETED,
		[CCode (cname="ICAL_COMPONENTS_PROPERTY")]
		COMPONENTS,
		[CCode (cname="ICAL_CONTACT_PROPERTY")]
		CONTACT,
		[CCode (cname="ICAL_CREATED_PROPERTY")]
		CREATED,
		[CCode (cname="ICAL_CSID_PROPERTY")]
		CSID,
		[CCode (cname="ICAL_DATEMAX_PROPERTY")]
		DATEMAX,
		[CCode (cname="ICAL_DATEMIN_PROPERTY")]
		DATEMIN,
		[CCode (cname="ICAL_DECREED_PROPERTY")]
		DECREED,
		[CCode (cname="ICAL_DEFAULTCHARSET_PROPERTY")]
		DEFAULTCHARSET,
		[CCode (cname="ICAL_DEFAULTLOCALE_PROPERTY")]
		DEFAULTLOCALE,
		[CCode (cname="ICAL_DEFAULTTZID_PROPERTY")]
		DEFAULTTZID,
		[CCode (cname="ICAL_DEFAULTVCARS_PROPERTY")]
		DEFAULTVCARS,
		[CCode (cname="ICAL_DENY_PROPERTY")]
		DENY,
		[CCode (cname="ICAL_DESCRIPTION_PROPERTY")]
		DESCRIPTION,
		[CCode (cname="ICAL_DTEND_PROPERTY")]
		DTEND,
		[CCode (cname="ICAL_DTSTAMP_PROPERTY")]
		DTSTAMP,
		[CCode (cname="ICAL_DTSTART_PROPERTY")]
		DTSTART,
		[CCode (cname="ICAL_DUE_PROPERTY")]
		DUE,
		[CCode (cname="ICAL_DURATION_PROPERTY")]
		DURATION,
		[CCode (cname="ICAL_EXDATE_PROPERTY")]
		EXDATE,
		[CCode (cname="ICAL_EXPAND_PROPERTY")]
		EXPAND,
		[CCode (cname="ICAL_EXRULE_PROPERTY")]
		EXRULE,
		[CCode (cname="ICAL_FREEBUSY_PROPERTY")]
		FREEBUSY,
		[CCode (cname="ICAL_GEO_PROPERTY")]
		GEO,
		[CCode (cname="ICAL_GRANT_PROPERTY")]
		GRANT,
		[CCode (cname="ICAL_ITIPVERSION_PROPERTY")]
		ITIPVERSION,
		[CCode (cname="ICAL_LASTMODIFIED_PROPERTY")]
		LASTMODIFIED,
		[CCode (cname="ICAL_LOCATION_PROPERTY")]
		LOCATION,
		[CCode (cname="ICAL_MAXCOMPONENTSIZE_PROPERTY")]
		MAXCOMPONENTSIZE,
		[CCode (cname="ICAL_MAXDATE_PROPERTY")]
		MAXDATE,
		[CCode (cname="ICAL_MAXRESULTS_PROPERTY")]
		MAXRESULTS,
		[CCode (cname="ICAL_MAXRESULTSSIZE_PROPERTY")]
		MAXRESULTSSIZE,
		[CCode (cname="ICAL_METHOD_PROPERTY")]
		METHOD,
		[CCode (cname="ICAL_MINDATE_PROPERTY")]
		MINDATE,
		[CCode (cname="ICAL_MULTIPART_PROPERTY")]
		MULTIPART,
		[CCode (cname="ICAL_NAME_PROPERTY")]
		NAME,
		[CCode (cname="ICAL_ORGANIZER_PROPERTY")]
		ORGANIZER,
		[CCode (cname="ICAL_OWNER_PROPERTY")]
		OWNER,
		[CCode (cname="ICAL_PERCENTCOMPLETE_PROPERTY")]
		PERCENTCOMPLETE,
		[CCode (cname="ICAL_PERMISSION_PROPERTY")]
		PERMISSION,
		[CCode (cname="ICAL_PRIORITY_PROPERTY")]
		PRIORITY,
		[CCode (cname="ICAL_PRODID_PROPERTY")]
		PRODID,
		[CCode (cname="ICAL_QUERY_PROPERTY")]
		QUERY,
		[CCode (cname="ICAL_QUERYLEVEL_PROPERTY")]
		QUERYLEVEL,
		[CCode (cname="ICAL_QUERYID_PROPERTY")]
		QUERYID,
		[CCode (cname="ICAL_QUERYNAME_PROPERTY")]
		QUERYNAME,
		[CCode (cname="ICAL_RDATE_PROPERTY")]
		RDATE,
		[CCode (cname="ICAL_RECURACCEPTED_PROPERTY")]
		RECURACCEPTED,
		[CCode (cname="ICAL_RECUREXPAND_PROPERTY")]
		RECUREXPAND,
		[CCode (cname="ICAL_RECURLIMIT_PROPERTY")]
		RECURLIMIT,
		[CCode (cname="ICAL_RECURRENCEID_PROPERTY")]
		RECURRENCEID,
		[CCode (cname="ICAL_RELATEDTO_PROPERTY")]
		RELATEDTO,
		[CCode (cname="ICAL_RELCALID_PROPERTY")]
		RELCALID,
		[CCode (cname="ICAL_REPEAT_PROPERTY")]
		REPEAT,
		[CCode (cname="ICAL_REQUESTSTATUS_PROPERTY")]
		REQUESTSTATUS,
		[CCode (cname="ICAL_RESOURCES_PROPERTY")]
		RESOURCES,
		[CCode (cname="ICAL_RESTRICTION_PROPERTY")]
		RESTRICTION,
		[CCode (cname="ICAL_RRULE_PROPERTY")]
		RRULE,
		[CCode (cname="ICAL_SCOPE_PROPERTY")]
		SCOPE,
		[CCode (cname="ICAL_SEQUENCE_PROPERTY")]
		SEQUENCE,
		[CCode (cname="ICAL_STATUS_PROPERTY")]
		STATUS,
		[CCode (cname="ICAL_STORESEXPANDED_PROPERTY")]
		STORESEXPANDED,
		[CCode (cname="ICAL_SUMMARY_PROPERTY")]
		SUMMARY,
		[CCode (cname="ICAL_TARGET_PROPERTY")]
		TARGET,
		[CCode (cname="ICAL_TRANSP_PROPERTY")]
		TRANSP,
		[CCode (cname="ICAL_TRIGGER_PROPERTY")]
		TRIGGER,
		[CCode (cname="ICAL_TZID_PROPERTY")]
		TZID,
		[CCode (cname="ICAL_TZNAME_PROPERTY")]
		TZNAME,
		[CCode (cname="ICAL_TZOFFSETFROM_PROPERTY")]
		TZOFFSETFROM,
		[CCode (cname="ICAL_TZOFFSETTO_PROPERTY")]
		TZOFFSETTO,
		[CCode (cname="ICAL_TZURL_PROPERTY")]
		TZURL,
		[CCode (cname="ICAL_UID_PROPERTY")]
		UID,
		[CCode (cname="ICAL_URL_PROPERTY")]
		URL,
		[CCode (cname="ICAL_VERSION_PROPERTY")]
		VERSION,
		[CCode (cname="ICAL_X_PROPERTY")]
		X,
		[CCode (cname="ICAL_XLICCLASS_PROPERTY")]
		XLICCLASS,
		[CCode (cname="ICAL_XLICCLUSTERCOUNT_PROPERTY")]
		XLICCLUSTERCOUNT,
		[CCode (cname="ICAL_XLICERROR_PROPERTY")]
		XLICERROR,
		[CCode (cname="ICAL_XLICMIMECHARSET_PROPERTY")]
		XLICMIMECHARSET,
		[CCode (cname="ICAL_XLICMIMECID_PROPERTY")]
		XLICMIMECID,
		[CCode (cname="ICAL_XLICMIMECONTENTTYPE_PROPERTY")]
		XLICMIMECONTENTTYPE,
		[CCode (cname="ICAL_XLICMIMEENCODING_PROPERTY")]
		XLICMIMEENCODING,
		[CCode (cname="ICAL_XLICMIMEFILENAME_PROPERTY")]
		XLICMIMEFILENAME,
		[CCode (cname="ICAL_XLICMIMEOPTINFO_PROPERTY")]
		XLICMIMEOPTINFO,
		[CCode (cname="ICAL_NO_PROPERTY")]
		NO
	}
	[CCode (cprefix = "ICAL_METHOD_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum PropertyMethod {
		X,
		PUBLISH,
		REQUEST,
		REPLY,
		ADD,
		CANCEL,
		REFRESH,
		COUNTER,
		DECLINECOUNTER,
		CREATE,
		READ,
		RESPONSE,
		MOVE,
		MODIFY,
		GENERATEUID,
		DELETE,
		NONE
	}
	[CCode (cprefix = "ICAL_QUERYLEVEL_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum PropertyQueryLevel {
		X,
		CALQL1,
		CALQLNONE,
		NONE
	}
	[CCode (cprefix = "ICAL_STATUS_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum PropertyStatus {
		X,
		TENTATIVE,
		CONFIRMED,
		COMPLETED,
		NEEDSACTION,
		CANCELLED,
		INPROCESS,
		DRAFT,
		FINAL,
		NONE
	}
	[CCode (cprefix = "ICAL_TRANSP_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum PropertyTransp {
		X,
		OPAQUE,
		OPAQUENOCONFLICT,
		TRANSPARENT,
		TRANSPARENTNOCONFLICT,
		NONE
	}
	[CCode (cprefix = "ICAL_XLICCLASS_", has_type_id = "0", cheader_filename = "libical/ical.h", cname="icalproperty_xlicclass")]
	public enum PropertyXLICClass {
		X,
		PUBLISHNEW,
		PUBLISHUPDATE,
		PUBLISHFREEBUSY,
		REQUESTNEW,
		REQUESTUPDATE,
		REQUESTRESCHEDULE,
		REQUESTDELEGATE,
		REQUESTNEWORGANIZER,
		REQUESTFORWARD,
		REQUESTSTATUS,
		REQUESTFREEBUSY,
		REPLYACCEPT,
		REPLYDECLINE,
		REPLYDELEGATE,
		REPLYCRASHERACCEPT,
		REPLYCRASHERDECLINE,
		ADDINSTANCE,
		CANCELEVENT,
		CANCELINSTANCE,
		CANCELALL,
		REFRESH,
		COUNTER,
		DECLINECOUNTER,
		MALFORMED,
		OBSOLETE,
		MISSEQUENCED,
		UNKNOWN,
		NONE
	}
	[CCode (cprefix = "ICAL_", has_type_id = "0", cheader_filename = "libical/ical.h", cname="icalrecurrencetype_frequency")]
	public enum RecurrenceFrequency {
		[CCode (cname="ICAL_SECONDLY_RECURRENCE")]
		SECONDLY,
		[CCode (cname="ICAL_MINUTELY_RECURRENCE")]
		MINUTELY,
		[CCode (cname="ICAL_HOURLY_RECURRENCE")]
		HOURLY,
		[CCode (cname="ICAL_DAILY_RECURRENCE")]
		DAILY,
		[CCode (cname="ICAL_WEEKLY_RECURRENCE")]
		WEEKLY,
		[CCode (cname="ICAL_MONTHLY_RECURRENCE")]
		MONTHLY,
		[CCode (cname="ICAL_YEARLY_RECURRENCE")]
		YEARLY,
		[CCode (cname="ICAL_NO_RECURRENCE")]
		NO
	}
	[CCode (cprefix = "ICAL_", has_type_id = "0", cheader_filename = "libical/ical.h", cname="icalrecurrencetype_weekday")]
	public enum RecurrenceWeekday {
		[CCode (cname="ICAL_NO_WEEKDAY")]
		NO,
		[CCode (cname="ICAL_SUNDAY_WEEKDAY")]
		SUNDAY,
		[CCode (cname="ICAL_MONDAY_WEEKDAY")]
		MONDAY,
		[CCode (cname="ICAL_TUESDAY_WEEKDAY")]
		TUESDAY,
		[CCode (cname="ICAL_WEDNESDAY_WEEKDAY")]
		WEDNESDAY,
		[CCode (cname="ICAL_THURSDAY_WEEKDAY")]
		THURSDAY,
		[CCode (cname="ICAL_FRIDAY_WEEKDAY")]
		FRIDAY,
		[CCode (cname="ICAL_SATURDAY_WEEKDAY")]
		SATURDAY
	}
	[CCode (cprefix = "ICAL_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum RequestStatus {
		UNKNOWN_STATUS,
		@2_0_SUCCESS_STATUS,
		@2_1_FALLBACK_STATUS,
		@2_2_IGPROP_STATUS,
		@2_3_IGPARAM_STATUS,
		@2_4_IGXPROP_STATUS,
		@2_5_IGXPARAM_STATUS,
		@2_6_IGCOMP_STATUS,
		@2_7_FORWARD_STATUS,
		@2_8_ONEEVENT_STATUS,
		@2_9_TRUNC_STATUS,
		@2_10_ONETODO_STATUS,
		@2_11_TRUNCRRULE_STATUS,
		@3_0_INVPROPNAME_STATUS,
		@3_1_INVPROPVAL_STATUS,
		@3_2_INVPARAM_STATUS,
		@3_3_INVPARAMVAL_STATUS,
		@3_4_INVCOMP_STATUS,
		@3_5_INVTIME_STATUS,
		@3_6_INVRULE_STATUS,
		@3_7_INVCU_STATUS,
		@3_8_NOAUTH_STATUS,
		@3_9_BADVERSION_STATUS,
		@3_10_TOOBIG_STATUS,
		@3_11_MISSREQCOMP_STATUS,
		@3_12_UNKCOMP_STATUS,
		@3_13_BADCOMP_STATUS,
		@3_14_NOCAP_STATUS,
		@3_15_INVCOMMAND,
		@4_0_BUSY_STATUS,
		@4_1_STORE_ACCESS_DENIED,
		@4_2_STORE_FAILED,
		@4_3_STORE_NOT_FOUND,
		@5_0_MAYBE_STATUS,
		@5_1_UNAVAIL_STATUS,
		@5_2_NOSERVICE_STATUS,
		@5_3_NOSCHED_STATUS,
		@6_1_CONTAINER_NOT_FOUND,
		@9_0_UNRECOGNIZED_COMMAND
	}
	[CCode (cprefix = "ICAL_RESTRICTION_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum RestrictionKind {
		NONE,
		ZERO,
		ONE,
		ZEROPLUS,
		ONEPLUS,
		ZEROORONE,
		ONEEXCLUSIVE,
		ONEMUTUAL,
		UNKNOWN
	}
	[CCode (cprefix = "ICAL_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum ValueKind {
		[CCode (cname="ICAL_ANY_VALUE")]
		ANY,
		[CCode (cname="ICAL_QUERY_VALUE")]
		QUERY,
		[CCode (cname="ICAL_DATE_VALUE")]
		DATE,
		[CCode (cname="ICAL_ATTACH_VALUE")]
		ATTACH,
		[CCode (cname="ICAL_GEO_VALUE")]
		GEO,
		[CCode (cname="ICAL_STATUS_VALUE")]
		STATUS,
		[CCode (cname="ICAL_TRANSP_VALUE")]
		TRANSP,
		[CCode (cname="ICAL_STRING_VALUE")]
		STRING,
		[CCode (cname="ICAL_TEXT_VALUE")]
		TEXT,
		[CCode (cname="ICAL_REQUESTSTATUS_VALUE")]
		REQUESTSTATUS,
		[CCode (cname="ICAL_CMD_VALUE")]
		CMD,
		[CCode (cname="ICAL_BINARY_VALUE")]
		BINARY,
		[CCode (cname="ICAL_QUERYLEVEL_VALUE")]
		QUERYLEVEL,
		[CCode (cname="ICAL_PERIOD_VALUE")]
		PERIOD,
		[CCode (cname="ICAL_FLOAT_VALUE")]
		FLOAT,
		[CCode (cname="ICAL_DATETIMEPERIOD_VALUE")]
		DATETIMEPERIOD,
		[CCode (cname="ICAL_CARLEVEL_VALUE")]
		CARLEVEL,
		[CCode (cname="ICAL_INTEGER_VALUE")]
		INTEGER,
		[CCode (cname="ICAL_CLASS_VALUE")]
		CLASS,
		[CCode (cname="ICAL_URI_VALUE")]
		URI,
		[CCode (cname="ICAL_DURATION_VALUE")]
		DURATION,
		[CCode (cname="ICAL_BOOLEAN_VALUE")]
		BOOLEAN,
		[CCode (cname="ICAL_X_VALUE")]
		X,
		[CCode (cname="ICAL_CALADDRESS_VALUE")]
		CALADDRESS,
		[CCode (cname="ICAL_TRIGGER_VALUE")]
		TRIGGER,
		[CCode (cname="ICAL_XLICCLASS_VALUE")]
		XLICCLASS,
		[CCode (cname="ICAL_RECUR_VALUE")]
		RECUR,
		[CCode (cname="ICAL_ACTION_VALUE")]
		ACTION,
		[CCode (cname="ICAL_DATETIME_VALUE")]
		DATETIME,
		[CCode (cname="ICAL_UTCOFFSET_VALUE")]
		UTCOFFSET,
		[CCode (cname="ICAL_METHOD_VALUE")]
		METHOD,
		[CCode (cname="ICAL_NO_VALUE")]
		NO
	}
	[CCode (cprefix = "ICAL_LOCAL_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum icalparameter_local {
		X,
		TRUE,
		FALSE,
		NONE
	}
	[CCode (cprefix = "ICAL_XLICCOMPARETYPE_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum icalparameter_xliccomparetype {
		X,
		EQUAL,
		NOTEQUAL,
		LESS,
		GREATER,
		LESSEQUAL,
		GREATEREQUAL,
		REGEX,
		ISNULL,
		ISNOTNULL,
		NONE
	}
	[CCode (cprefix = "ICAL_XLICERRORTYPE_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum icalparameter_xlicerrortype {
		X,
		COMPONENTPARSEERROR,
		PROPERTYPARSEERROR,
		PARAMETERNAMEPARSEERROR,
		PARAMETERVALUEPARSEERROR,
		VALUEPARSEERROR,
		INVALIDITIP,
		UNKNOWNVCALPROPERROR,
		MIMEPARSEERROR,
		VCALPROPPARSEERROR,
		NONE
	}
	[CCode (cprefix = "ICAL_CARLEVEL_", has_type_id = "0", cheader_filename = "libical/ical.h")]
	public enum icalproperty_carlevel {
		X,
		CARNONE,
		CARMIN,
		CARFULL1,
		NONE
	}
	[CCode (cheader_filename = "libical/ical.h")]
	public delegate void icalattach_free_fn_t (uint data);
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_BY_DAY_SIZE")]
	public const int BY_DAY_SIZE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_BY_HOUR_SIZE")]
	public const int BY_HOUR_SIZE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_BY_MINUTE_SIZE")]
	public const int BY_MINUTE_SIZE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_BY_MONTHDAY_SIZE")]
	public const int BY_MONTHDAY_SIZE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_BY_MONTH_SIZE")]
	public const int BY_MONTH_SIZE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_BY_SECOND_SIZE")]
	public const int BY_SECOND_SIZE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_BY_SETPOS_SIZE")]
	public const int BY_SETPOS_SIZE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_BY_WEEKNO_SIZE")]
	public const int BY_WEEKNO_SIZE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_BY_YEARDAY_SIZE")]
	public const int BY_YEARDAY_SIZE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_ICALPARAMETER_FIRST_ENUM")]
	public const int ICALPARAMETER_FIRST_ENUM;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_ICALPARAMETER_LAST_ENUM")]
	public const int ICALPARAMETER_LAST_ENUM;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_ICALPROPERTY_FIRST_ENUM")]
	public const int ICALPROPERTY_FIRST_ENUM;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_ICALPROPERTY_LAST_ENUM")]
	public const int ICALPROPERTY_LAST_ENUM;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_PACKAGE")]
	public const string PACKAGE;
	[CCode (cheader_filename = "libical/ical.h", cname="ICAL_VERSION")]
	public const string VERSION;
	[CCode (cname = "ical_bt", cheader_filename = "libical/ical.h")]
	public static void bt ();
	[CCode (cname = "decode_base64", cheader_filename = "libical/ical.h")]
	public static unowned string decode_base64 (string dest, string src, size_t size);
	[CCode (cname = "decode_quoted_printable", cheader_filename = "libical/ical.h")]
	public static unowned string decode_quoted_printable (string dest, string src, size_t size);
	[CCode (cname = "free_zone_directory", cheader_filename = "libical/ical.h")]
	public static void free_zone_directory ();
	[CCode (cname = "icalattachtype_add_reference", cheader_filename = "libical/ical.h")]
	public static void icalattachtype_add_reference (void* v);
	[CCode (cname = "icalattachtype_free", cheader_filename = "libical/ical.h")]
	public static void icalattachtype_free (void* v);
	[CCode (cname = "icalattachtype_get_base64", cheader_filename = "libical/ical.h")]
	public static unowned string icalattachtype_get_base64 (void* v);
	[CCode (cname = "icalattachtype_get_binary", cheader_filename = "libical/ical.h")]
	public static void* icalattachtype_get_binary (void* v);
	[CCode (cname = "icalattachtype_get_url", cheader_filename = "libical/ical.h")]
	public static unowned string icalattachtype_get_url (void* v);
	[CCode (cname = "icalattachtype_new", cheader_filename = "libical/ical.h")]
	public static void* icalattachtype_new ();
	[CCode (cname = "icalattachtype_set_base64", cheader_filename = "libical/ical.h")]
	public static void icalattachtype_set_base64 (void* v, string base64, int owns);
	[CCode (cname = "icalattachtype_set_binary", cheader_filename = "libical/ical.h")]
	public static void icalattachtype_set_binary (void* v, string binary, int owns);
	[CCode (cname = "icalattachtype_set_url", cheader_filename = "libical/ical.h")]
	public static void icalattachtype_set_url (void* v, string url);
	[CCode (cname = "icaldurationtype_as_ical_string", cheader_filename = "libical/ical.h")]
	public static unowned string icaldurationtype_as_ical_string (void* d);
	[CCode (cname = "icaldurationtype_as_ical_string_r", cheader_filename = "libical/ical.h")]
	public static string icaldurationtype_as_ical_string_r (void* d);
	[CCode (cname = "icaldurationtype_as_int", cheader_filename = "libical/ical.h")]
	public static int icaldurationtype_as_int (void* duration);
	[CCode (cname = "icaldurationtype_bad_duration", cheader_filename = "libical/ical.h")]
	public static void* icaldurationtype_bad_duration ();
	[CCode (cname = "icaldurationtype_from_int", cheader_filename = "libical/ical.h")]
	public static void* icaldurationtype_from_int (int t);
	[CCode (cname = "icaldurationtype_from_string", cheader_filename = "libical/ical.h")]
	public static void* icaldurationtype_from_string (string p1);
	[CCode (cname = "icaldurationtype_is_bad_duration", cheader_filename = "libical/ical.h")]
	public static bool icaldurationtype_is_bad_duration (void* d);
	[CCode (cname = "icaldurationtype_is_null_duration", cheader_filename = "libical/ical.h")]
	public static bool icaldurationtype_is_null_duration (void* d);
	[CCode (cname = "icaldurationtype_null_duration", cheader_filename = "libical/ical.h")]
	public static void* icaldurationtype_null_duration ();
	[CCode (cname = "icalenum_num_to_reqstat", cheader_filename = "libical/ical.h")]
	public static ICal.RequestStatus icalenum_num_to_reqstat (short major, short minor);
	[CCode (cname = "icalenum_reqstat_code", cheader_filename = "libical/ical.h")]
	public static unowned string icalenum_reqstat_code (ICal.RequestStatus stat);
	[CCode (cname = "icalenum_reqstat_code_r", cheader_filename = "libical/ical.h")]
	public static string icalenum_reqstat_code_r (ICal.RequestStatus stat);
	[CCode (cname = "icalenum_reqstat_desc", cheader_filename = "libical/ical.h")]
	public static unowned string icalenum_reqstat_desc (ICal.RequestStatus stat);
	[CCode (cname = "icalenum_reqstat_major", cheader_filename = "libical/ical.h")]
	public static short icalenum_reqstat_major (ICal.RequestStatus stat);
	[CCode (cname = "icalenum_reqstat_minor", cheader_filename = "libical/ical.h")]
	public static short icalenum_reqstat_minor (ICal.RequestStatus stat);
	[CCode (cname = "icalerrno_return", cheader_filename = "libical/ical.h")]
	public static ICal.ErrorEnum icalerrno_return ();
	[CCode (cname = "icalerror_clear_errno", cheader_filename = "libical/ical.h")]
	public static void icalerror_clear_errno ();
	[CCode (cname = "icalerror_crash_here", cheader_filename = "libical/ical.h")]
	public static void icalerror_crash_here ();
	[CCode (cname = "icalerror_get_error_state", cheader_filename = "libical/ical.h")]
	public static ICal.ErrorState icalerror_get_error_state (ICal.ErrorEnum error);
	[CCode (cname = "icalerror_perror", cheader_filename = "libical/ical.h")]
	public static unowned string icalerror_perror ();
	[CCode (cname = "icalerror_restore", cheader_filename = "libical/ical.h")]
	public static void icalerror_restore (string error, ICal.ErrorState es);
	[CCode (cname = "icalerror_set_errno", cheader_filename = "libical/ical.h")]
	public static void icalerror_set_errno (ICal.ErrorEnum x);
	[CCode (cname = "icalerror_set_error_state", cheader_filename = "libical/ical.h")]
	public static void icalerror_set_error_state (ICal.ErrorEnum error, ICal.ErrorState p2);
	[CCode (cname = "icalerror_stop_here", cheader_filename = "libical/ical.h")]
	public static void icalerror_stop_here ();
	[CCode (cname = "icalerror_strerror", cheader_filename = "libical/ical.h")]
	public static unowned string icalerror_strerror (ICal.ErrorEnum e);
	[CCode (cname = "icalerror_supress", cheader_filename = "libical/ical.h")]
	public static ICal.ErrorState icalerror_supress (string error);
	[CCode (cname = "icallangbind_access_array", cheader_filename = "libical/ical.h")]
	public static int icallangbind_access_array (int array, int index);
	[CCode (cname = "icallangbind_free_array", cheader_filename = "libical/ical.h")]
	public static void icallangbind_free_array (int array);
	[CCode (cname = "icallangbind_get_component", cheader_filename = "libical/ical.h")]
	public static unowned ICal.Component icallangbind_get_component (ICal.Component c, string comp);
	[CCode (cname = "icallangbind_get_first_component", cheader_filename = "libical/ical.h")]
	public static unowned ICal.Component icallangbind_get_first_component (ICal.Component c, string comp);
	[CCode (cname = "icallangbind_get_first_parameter", cheader_filename = "libical/ical.h")]
	public static unowned ICal.Parameter icallangbind_get_first_parameter (ICal.Property prop);
	[CCode (cname = "icallangbind_get_first_property", cheader_filename = "libical/ical.h")]
	public static unowned ICal.Property icallangbind_get_first_property (ICal.Component c, string prop);
	[CCode (cname = "icallangbind_get_next_component", cheader_filename = "libical/ical.h")]
	public static unowned ICal.Component icallangbind_get_next_component (ICal.Component c, string comp);
	[CCode (cname = "icallangbind_get_next_parameter", cheader_filename = "libical/ical.h")]
	public static unowned ICal.Parameter icallangbind_get_next_parameter (ICal.Property prop);
	[CCode (cname = "icallangbind_get_next_property", cheader_filename = "libical/ical.h")]
	public static unowned ICal.Property icallangbind_get_next_property (ICal.Component c, string prop);
	[CCode (cname = "icallangbind_get_parameter", cheader_filename = "libical/ical.h")]
	public static unowned string icallangbind_get_parameter (ICal.Property p, string parameter);
	[CCode (cname = "icallangbind_get_property", cheader_filename = "libical/ical.h")]
	public static unowned ICal.Property icallangbind_get_property (ICal.Component c, int n, string prop);
	[CCode (cname = "icallangbind_get_property_val", cheader_filename = "libical/ical.h")]
	public static unowned string icallangbind_get_property_val (ICal.Property p);
	[CCode (cname = "icallangbind_new_array", cheader_filename = "libical/ical.h")]
	public static int icallangbind_new_array (int size);
	[CCode (cname = "icallangbind_property_eval_string", cheader_filename = "libical/ical.h")]
	public static unowned string icallangbind_property_eval_string (ICal.Property prop, string sep);
	[CCode (cname = "icallangbind_property_eval_string_r", cheader_filename = "libical/ical.h")]
	public static string icallangbind_property_eval_string_r (ICal.Property prop, string sep);
	[CCode (cname = "icallangbind_quote_as_ical", cheader_filename = "libical/ical.h")]
	public static unowned string icallangbind_quote_as_ical (string str);
	[CCode (cname = "icallangbind_quote_as_ical_r", cheader_filename = "libical/ical.h")]
	public static string icallangbind_quote_as_ical_r (string str);
	[CCode (cname = "icallangbind_string_to_open_flag", cheader_filename = "libical/ical.h")]
	public static int icallangbind_string_to_open_flag (string str);
	[CCode (cname = "icalmemory_add_tmp_buffer", cheader_filename = "libical/ical.h")]
	public static void icalmemory_add_tmp_buffer (void* p1);
	[CCode (cname = "icalmemory_append_char", cheader_filename = "libical/ical.h")]
	public static void icalmemory_append_char (out unowned string buf, out unowned string pos, size_t buf_size, string ch);
	[CCode (cname = "icalmemory_append_string", cheader_filename = "libical/ical.h")]
	public static void icalmemory_append_string (out unowned string buf, out unowned string pos, size_t buf_size, string str);
	[CCode (cname = "icalmemory_free_buffer", cheader_filename = "libical/ical.h")]
	public static void icalmemory_free_buffer (void* buf);
	[CCode (cname = "icalmemory_free_ring", cheader_filename = "libical/ical.h")]
	public static void icalmemory_free_ring ();
	[CCode (cname = "icalmemory_new_buffer", cheader_filename = "libical/ical.h")]
	public static void* icalmemory_new_buffer (size_t size);
	[CCode (cname = "icalmemory_resize_buffer", cheader_filename = "libical/ical.h")]
	public static void* icalmemory_resize_buffer (void* buf, size_t size);
	[CCode (cname = "icalmemory_strdup", cheader_filename = "libical/ical.h")]
	public static unowned string icalmemory_strdup (string s);
	[CCode (cname = "icalmemory_tmp_buffer", cheader_filename = "libical/ical.h")]
	public static void* icalmemory_tmp_buffer (size_t size);
	[CCode (cname = "icalmemory_tmp_copy", cheader_filename = "libical/ical.h")]
	public static unowned string icalmemory_tmp_copy (string str);
	[CCode (cname = "icalmime_as_mime_string", cheader_filename = "libical/ical.h")]
	public static unowned string icalmime_as_mime_string (string component);
	[CCode (cname = "icalmime_parse", cheader_filename = "libical/ical.h")]
	public static unowned ICal.Component icalmime_parse (ICal.LineGenFunc line_gen_func, void* data);
	[CCode (cname = "icalperiodtype_as_ical_string", cheader_filename = "libical/ical.h")]
	public static unowned string icalperiodtype_as_ical_string (void* p);
	[CCode (cname = "icalperiodtype_as_ical_string_r", cheader_filename = "libical/ical.h")]
	public static string icalperiodtype_as_ical_string_r (void* p);
	[CCode (cname = "icalperiodtype_from_string", cheader_filename = "libical/ical.h")]
	public static void* icalperiodtype_from_string (string str);
	[CCode (cname = "icalperiodtype_is_null_period", cheader_filename = "libical/ical.h")]
	public static bool icalperiodtype_is_null_period (void* p);
	[CCode (cname = "icalperiodtype_is_valid_period", cheader_filename = "libical/ical.h")]
	public static bool icalperiodtype_is_valid_period (void* p);
	[CCode (cname = "icalperiodtype_null_period", cheader_filename = "libical/ical.h")]
	public static void* icalperiodtype_null_period ();
	[CCode (cname = "icalrecur_expand_recurrence", cheader_filename = "libical/ical.h")]
	public static int icalrecur_expand_recurrence (string rule, ulong start, int count, ulong array);
	[CCode (cname = "icalrecur_string_to_weekday", cheader_filename = "libical/ical.h")]
	public static ICal.RecurrenceWeekday icalrecur_string_to_weekday (string str);
	[CCode (cname = "icalreqstattype_as_string", cheader_filename = "libical/ical.h")]
	public static unowned string icalreqstattype_as_string (void* p1);
	[CCode (cname = "icalreqstattype_as_string_r", cheader_filename = "libical/ical.h")]
	public static string icalreqstattype_as_string_r (void* p1);
	[CCode (cname = "icalreqstattype_from_string", cheader_filename = "libical/ical.h")]
	public static void* icalreqstattype_from_string (string str);
	[CCode (cname = "icalrestriction_check", cheader_filename = "libical/ical.h")]
	public static int icalrestriction_check (ICal.Component comp);
	[CCode (cname = "icalrestriction_compare", cheader_filename = "libical/ical.h")]
	public static int icalrestriction_compare (ICal.RestrictionKind restr, int count);
	[CCode (cname = "icalrestriction_is_parameter_allowed", cheader_filename = "libical/ical.h")]
	public static bool icalrestriction_is_parameter_allowed (ICal.PropertyKind property, ICal.ParameterKind parameter);
	[CCode (cname = "icaltimezonetype_free", cheader_filename = "libical/ical.h")]
	public static void icaltimezonetype_free (void* tzt);
	[CCode (cname = "icaltriggertype_from_int", cheader_filename = "libical/ical.h")]
	public static void* icaltriggertype_from_int (int reltime);
	[CCode (cname = "icaltriggertype_from_string", cheader_filename = "libical/ical.h")]
	public static void* icaltriggertype_from_string (string str);
	[CCode (cname = "icaltriggertype_is_bad_trigger", cheader_filename = "libical/ical.h")]
	public static bool icaltriggertype_is_bad_trigger (void* tr);
	[CCode (cname = "icaltriggertype_is_null_trigger", cheader_filename = "libical/ical.h")]
	public static bool icaltriggertype_is_null_trigger (void* tr);
	[CCode (cname = "set_zone_directory", cheader_filename = "libical/ical.h")]
	public static void set_zone_directory (string path);
}
namespace ICal {
	[CCode (has_target=false, cname="char* (*)(char *s, size_t size, void *d)")]
	public delegate unowned string LineGenFunc (char[] s, void* data);
}
